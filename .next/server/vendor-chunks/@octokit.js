"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@octokit";
exports.ids = ["vendor-chunks/@octokit"];
exports.modules = {

/***/ "(rsc)/./node_modules/@octokit/auth-token/dist-node/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@octokit/auth-token/dist-node/index.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    createTokenAuth: ()=>createTokenAuth\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n// pkg/dist-src/auth.js\nvar REGEX_IS_INSTALLATION_LEGACY = /^v1\\./;\nvar REGEX_IS_INSTALLATION = /^ghs_/;\nvar REGEX_IS_USER_TO_SERVER = /^ghu_/;\nasync function auth(token) {\n    const isApp = token.split(/\\./).length === 3;\n    const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);\n    const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);\n    const tokenType = isApp ? \"app\" : isInstallation ? \"installation\" : isUserToServer ? \"user-to-server\" : \"oauth\";\n    return {\n        type: \"token\",\n        token,\n        tokenType\n    };\n}\n// pkg/dist-src/with-authorization-prefix.js\nfunction withAuthorizationPrefix(token) {\n    if (token.split(/\\./).length === 3) {\n        return `bearer ${token}`;\n    }\n    return `token ${token}`;\n}\n// pkg/dist-src/hook.js\nasync function hook(token, request, route, parameters) {\n    const endpoint = request.endpoint.merge(route, parameters);\n    endpoint.headers.authorization = withAuthorizationPrefix(token);\n    return request(endpoint);\n}\n// pkg/dist-src/index.js\nvar createTokenAuth = function createTokenAuth2(token) {\n    if (!token) {\n        throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n    }\n    if (typeof token !== \"string\") {\n        throw new Error(\"[@octokit/auth-token] Token passed to createTokenAuth is not a string\");\n    }\n    token = token.replace(/^(token|bearer) +/i, \"\");\n    return Object.assign(auth.bind(null, token), {\n        hook: hook.bind(null, token)\n    });\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvYXV0aC10b2tlbi9kaXN0LW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZlosVUFBVVcsUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPaEIsa0JBQWtCYSxNQUNoQyxJQUFJLENBQUNYLGFBQWFlLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekNuQixVQUFVaUIsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9qQixpQkFBaUJlLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWWhCLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRXlCLE9BQU87SUFBSyxJQUFJRDtBQUV0Rix3QkFBd0I7QUFDeEIsSUFBSUUsbUJBQW1CLENBQUM7QUFDeEJoQixTQUFTZ0Isa0JBQWtCO0lBQ3pCQyxpQkFBaUIsSUFBTUE7QUFDekI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTixhQUFhRztBQUU5Qix1QkFBdUI7QUFDdkIsSUFBSUksK0JBQStCO0FBQ25DLElBQUlDLHdCQUF3QjtBQUM1QixJQUFJQywwQkFBMEI7QUFDOUIsZUFBZUMsS0FBS0MsS0FBSztJQUN2QixNQUFNQyxRQUFRRCxNQUFNRSxLQUFLLENBQUMsTUFBTUMsTUFBTSxLQUFLO0lBQzNDLE1BQU1DLGlCQUFpQlIsNkJBQTZCUyxJQUFJLENBQUNMLFVBQVVILHNCQUFzQlEsSUFBSSxDQUFDTDtJQUM5RixNQUFNTSxpQkFBaUJSLHdCQUF3Qk8sSUFBSSxDQUFDTDtJQUNwRCxNQUFNTyxZQUFZTixRQUFRLFFBQVFHLGlCQUFpQixpQkFBaUJFLGlCQUFpQixtQkFBbUI7SUFDeEcsT0FBTztRQUNMRSxNQUFNO1FBQ05SO1FBQ0FPO0lBQ0Y7QUFDRjtBQUVBLDRDQUE0QztBQUM1QyxTQUFTRSx3QkFBd0JULEtBQUs7SUFDcEMsSUFBSUEsTUFBTUUsS0FBSyxDQUFDLE1BQU1DLE1BQU0sS0FBSyxHQUFHO1FBQ2xDLE9BQU8sQ0FBQyxPQUFPLEVBQUVILE1BQU0sQ0FBQztJQUMxQjtJQUNBLE9BQU8sQ0FBQyxNQUFNLEVBQUVBLE1BQU0sQ0FBQztBQUN6QjtBQUVBLHVCQUF1QjtBQUN2QixlQUFlVSxLQUFLVixLQUFLLEVBQUVXLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxVQUFVO0lBQ25ELE1BQU1DLFdBQVdILFFBQVFHLFFBQVEsQ0FBQ0MsS0FBSyxDQUNyQ0gsT0FDQUM7SUFFRkMsU0FBU0UsT0FBTyxDQUFDQyxhQUFhLEdBQUdSLHdCQUF3QlQ7SUFDekQsT0FBT1csUUFBUUc7QUFDakI7QUFFQSx3QkFBd0I7QUFDeEIsSUFBSXJCLGtCQUFrQixTQUFTeUIsaUJBQWlCbEIsS0FBSztJQUNuRCxJQUFJLENBQUNBLE9BQU87UUFDVixNQUFNLElBQUltQixNQUFNO0lBQ2xCO0lBQ0EsSUFBSSxPQUFPbkIsVUFBVSxVQUFVO1FBQzdCLE1BQU0sSUFBSW1CLE1BQ1I7SUFFSjtJQUNBbkIsUUFBUUEsTUFBTW9CLE9BQU8sQ0FBQyxzQkFBc0I7SUFDNUMsT0FBT3JELE9BQU9zRCxNQUFNLENBQUN0QixLQUFLdUIsSUFBSSxDQUFDLE1BQU10QixRQUFRO1FBQzNDVSxNQUFNQSxLQUFLWSxJQUFJLENBQUMsTUFBTXRCO0lBQ3hCO0FBQ0Y7QUFDQSw2REFBNkQ7QUFDN0QsS0FBTU4sQ0FBQUEsQ0FFTiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9hdXRoLXRva2VuL2Rpc3Qtbm9kZS9pbmRleC5qcz82NzY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgZGlzdF9zcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZGlzdF9zcmNfZXhwb3J0cywge1xuICBjcmVhdGVUb2tlbkF1dGg6ICgpID0+IGNyZWF0ZVRva2VuQXV0aFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhkaXN0X3NyY19leHBvcnRzKTtcblxuLy8gcGtnL2Rpc3Qtc3JjL2F1dGguanNcbnZhciBSRUdFWF9JU19JTlNUQUxMQVRJT05fTEVHQUNZID0gL152MVxcLi87XG52YXIgUkVHRVhfSVNfSU5TVEFMTEFUSU9OID0gL15naHNfLztcbnZhciBSRUdFWF9JU19VU0VSX1RPX1NFUlZFUiA9IC9eZ2h1Xy87XG5hc3luYyBmdW5jdGlvbiBhdXRoKHRva2VuKSB7XG4gIGNvbnN0IGlzQXBwID0gdG9rZW4uc3BsaXQoL1xcLi8pLmxlbmd0aCA9PT0gMztcbiAgY29uc3QgaXNJbnN0YWxsYXRpb24gPSBSRUdFWF9JU19JTlNUQUxMQVRJT05fTEVHQUNZLnRlc3QodG9rZW4pIHx8IFJFR0VYX0lTX0lOU1RBTExBVElPTi50ZXN0KHRva2VuKTtcbiAgY29uc3QgaXNVc2VyVG9TZXJ2ZXIgPSBSRUdFWF9JU19VU0VSX1RPX1NFUlZFUi50ZXN0KHRva2VuKTtcbiAgY29uc3QgdG9rZW5UeXBlID0gaXNBcHAgPyBcImFwcFwiIDogaXNJbnN0YWxsYXRpb24gPyBcImluc3RhbGxhdGlvblwiIDogaXNVc2VyVG9TZXJ2ZXIgPyBcInVzZXItdG8tc2VydmVyXCIgOiBcIm9hdXRoXCI7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJ0b2tlblwiLFxuICAgIHRva2VuLFxuICAgIHRva2VuVHlwZVxuICB9O1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvd2l0aC1hdXRob3JpemF0aW9uLXByZWZpeC5qc1xuZnVuY3Rpb24gd2l0aEF1dGhvcml6YXRpb25QcmVmaXgodG9rZW4pIHtcbiAgaWYgKHRva2VuLnNwbGl0KC9cXC4vKS5sZW5ndGggPT09IDMpIHtcbiAgICByZXR1cm4gYGJlYXJlciAke3Rva2VufWA7XG4gIH1cbiAgcmV0dXJuIGB0b2tlbiAke3Rva2VufWA7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9ob29rLmpzXG5hc3luYyBmdW5jdGlvbiBob29rKHRva2VuLCByZXF1ZXN0LCByb3V0ZSwgcGFyYW1ldGVycykge1xuICBjb25zdCBlbmRwb2ludCA9IHJlcXVlc3QuZW5kcG9pbnQubWVyZ2UoXG4gICAgcm91dGUsXG4gICAgcGFyYW1ldGVyc1xuICApO1xuICBlbmRwb2ludC5oZWFkZXJzLmF1dGhvcml6YXRpb24gPSB3aXRoQXV0aG9yaXphdGlvblByZWZpeCh0b2tlbik7XG4gIHJldHVybiByZXF1ZXN0KGVuZHBvaW50KTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgY3JlYXRlVG9rZW5BdXRoID0gZnVuY3Rpb24gY3JlYXRlVG9rZW5BdXRoMih0b2tlbikge1xuICBpZiAoIXRva2VuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW0BvY3Rva2l0L2F1dGgtdG9rZW5dIE5vIHRva2VuIHBhc3NlZCB0byBjcmVhdGVUb2tlbkF1dGhcIik7XG4gIH1cbiAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW0BvY3Rva2l0L2F1dGgtdG9rZW5dIFRva2VuIHBhc3NlZCB0byBjcmVhdGVUb2tlbkF1dGggaXMgbm90IGEgc3RyaW5nXCJcbiAgICApO1xuICB9XG4gIHRva2VuID0gdG9rZW4ucmVwbGFjZSgvXih0b2tlbnxiZWFyZXIpICsvaSwgXCJcIik7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGF1dGguYmluZChudWxsLCB0b2tlbiksIHtcbiAgICBob29rOiBob29rLmJpbmQobnVsbCwgdG9rZW4pXG4gIH0pO1xufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVUb2tlbkF1dGhcbn0pO1xuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJ2YWx1ZSIsImRpc3Rfc3JjX2V4cG9ydHMiLCJjcmVhdGVUb2tlbkF1dGgiLCJtb2R1bGUiLCJleHBvcnRzIiwiUkVHRVhfSVNfSU5TVEFMTEFUSU9OX0xFR0FDWSIsIlJFR0VYX0lTX0lOU1RBTExBVElPTiIsIlJFR0VYX0lTX1VTRVJfVE9fU0VSVkVSIiwiYXV0aCIsInRva2VuIiwiaXNBcHAiLCJzcGxpdCIsImxlbmd0aCIsImlzSW5zdGFsbGF0aW9uIiwidGVzdCIsImlzVXNlclRvU2VydmVyIiwidG9rZW5UeXBlIiwidHlwZSIsIndpdGhBdXRob3JpemF0aW9uUHJlZml4IiwiaG9vayIsInJlcXVlc3QiLCJyb3V0ZSIsInBhcmFtZXRlcnMiLCJlbmRwb2ludCIsIm1lcmdlIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJjcmVhdGVUb2tlbkF1dGgyIiwiRXJyb3IiLCJyZXBsYWNlIiwiYXNzaWduIiwiYmluZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/auth-token/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/core/dist-node/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@octokit/core/dist-node/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    Octokit: ()=>Octokit\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_universal_user_agent = __webpack_require__(/*! universal-user-agent */ \"(rsc)/./node_modules/universal-user-agent/dist-node/index.js\");\nvar import_before_after_hook = __webpack_require__(/*! before-after-hook */ \"(rsc)/./node_modules/before-after-hook/index.js\");\nvar import_request = __webpack_require__(/*! @octokit/request */ \"(rsc)/./node_modules/@octokit/request/dist-node/index.js\");\nvar import_graphql = __webpack_require__(/*! @octokit/graphql */ \"(rsc)/./node_modules/@octokit/graphql/dist-node/index.js\");\nvar import_auth_token = __webpack_require__(/*! @octokit/auth-token */ \"(rsc)/./node_modules/@octokit/auth-token/dist-node/index.js\");\n// pkg/dist-src/version.js\nvar VERSION = \"5.2.0\";\n// pkg/dist-src/index.js\nvar noop = ()=>{};\nvar consoleWarn = console.warn.bind(console);\nvar consoleError = console.error.bind(console);\nvar userAgentTrail = `octokit-core.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;\nvar Octokit = class {\n    static{\n        this.VERSION = VERSION;\n    }\n    static defaults(defaults) {\n        const OctokitWithDefaults = class extends this {\n            constructor(...args){\n                const options = args[0] || {};\n                if (typeof defaults === \"function\") {\n                    super(defaults(options));\n                    return;\n                }\n                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {\n                    userAgent: `${options.userAgent} ${defaults.userAgent}`\n                } : null));\n            }\n        };\n        return OctokitWithDefaults;\n    }\n    static{\n        this.plugins = [];\n    }\n    /**\n   * Attach a plugin (or many) to your Octokit instance.\n   *\n   * @example\n   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n   */ static plugin(...newPlugins) {\n        const currentPlugins = this.plugins;\n        const NewOctokit = class extends this {\n            static{\n                this.plugins = currentPlugins.concat(newPlugins.filter((plugin)=>!currentPlugins.includes(plugin)));\n            }\n        };\n        return NewOctokit;\n    }\n    constructor(options = {}){\n        const hook = new import_before_after_hook.Collection();\n        const requestDefaults = {\n            baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,\n            headers: {},\n            request: Object.assign({}, options.request, {\n                // @ts-ignore internal usage only, no need to type\n                hook: hook.bind(null, \"request\")\n            }),\n            mediaType: {\n                previews: [],\n                format: \"\"\n            }\n        };\n        requestDefaults.headers[\"user-agent\"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;\n        if (options.baseUrl) {\n            requestDefaults.baseUrl = options.baseUrl;\n        }\n        if (options.previews) {\n            requestDefaults.mediaType.previews = options.previews;\n        }\n        if (options.timeZone) {\n            requestDefaults.headers[\"time-zone\"] = options.timeZone;\n        }\n        this.request = import_request.request.defaults(requestDefaults);\n        this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);\n        this.log = Object.assign({\n            debug: noop,\n            info: noop,\n            warn: consoleWarn,\n            error: consoleError\n        }, options.log);\n        this.hook = hook;\n        if (!options.authStrategy) {\n            if (!options.auth) {\n                this.auth = async ()=>({\n                        type: \"unauthenticated\"\n                    });\n            } else {\n                const auth = (0, import_auth_token.createTokenAuth)(options.auth);\n                hook.wrap(\"request\", auth.hook);\n                this.auth = auth;\n            }\n        } else {\n            const { authStrategy, ...otherOptions } = options;\n            const auth = authStrategy(Object.assign({\n                request: this.request,\n                log: this.log,\n                // we pass the current octokit instance as well as its constructor options\n                // to allow for authentication strategies that return a new octokit instance\n                // that shares the same internal state as the current one. The original\n                // requirement for this was the \"event-octokit\" authentication strategy\n                // of https://github.com/probot/octokit-auth-probot.\n                octokit: this,\n                octokitOptions: otherOptions\n            }, options.auth));\n            hook.wrap(\"request\", auth.hook);\n            this.auth = auth;\n        }\n        const classConstructor = this.constructor;\n        for(let i = 0; i < classConstructor.plugins.length; ++i){\n            Object.assign(this, classConstructor.plugins[i](this, options));\n        }\n    }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/core/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/endpoint/dist-node/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@octokit/endpoint/dist-node/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    endpoint: ()=>endpoint\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n// pkg/dist-src/defaults.js\nvar import_universal_user_agent = __webpack_require__(/*! universal-user-agent */ \"(rsc)/./node_modules/universal-user-agent/dist-node/index.js\");\n// pkg/dist-src/version.js\nvar VERSION = \"9.0.5\";\n// pkg/dist-src/defaults.js\nvar userAgent = `octokit-endpoint.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;\nvar DEFAULTS = {\n    method: \"GET\",\n    baseUrl: \"https://api.github.com\",\n    headers: {\n        accept: \"application/vnd.github.v3+json\",\n        \"user-agent\": userAgent\n    },\n    mediaType: {\n        format: \"\"\n    }\n};\n// pkg/dist-src/util/lowercase-keys.js\nfunction lowercaseKeys(object) {\n    if (!object) {\n        return {};\n    }\n    return Object.keys(object).reduce((newObj, key)=>{\n        newObj[key.toLowerCase()] = object[key];\n        return newObj;\n    }, {});\n}\n// pkg/dist-src/util/is-plain-object.js\nfunction isPlainObject(value) {\n    if (typeof value !== \"object\" || value === null) return false;\n    if (Object.prototype.toString.call(value) !== \"[object Object]\") return false;\n    const proto = Object.getPrototypeOf(value);\n    if (proto === null) return true;\n    const Ctor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n    return typeof Ctor === \"function\" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);\n}\n// pkg/dist-src/util/merge-deep.js\nfunction mergeDeep(defaults, options) {\n    const result = Object.assign({}, defaults);\n    Object.keys(options).forEach((key)=>{\n        if (isPlainObject(options[key])) {\n            if (!(key in defaults)) Object.assign(result, {\n                [key]: options[key]\n            });\n            else result[key] = mergeDeep(defaults[key], options[key]);\n        } else {\n            Object.assign(result, {\n                [key]: options[key]\n            });\n        }\n    });\n    return result;\n}\n// pkg/dist-src/util/remove-undefined-properties.js\nfunction removeUndefinedProperties(obj) {\n    for(const key in obj){\n        if (obj[key] === void 0) {\n            delete obj[key];\n        }\n    }\n    return obj;\n}\n// pkg/dist-src/merge.js\nfunction merge(defaults, route, options) {\n    if (typeof route === \"string\") {\n        let [method, url] = route.split(\" \");\n        options = Object.assign(url ? {\n            method,\n            url\n        } : {\n            url: method\n        }, options);\n    } else {\n        options = Object.assign({}, route);\n    }\n    options.headers = lowercaseKeys(options.headers);\n    removeUndefinedProperties(options);\n    removeUndefinedProperties(options.headers);\n    const mergedOptions = mergeDeep(defaults || {}, options);\n    if (options.url === \"/graphql\") {\n        if (defaults && defaults.mediaType.previews?.length) {\n            mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview)=>!mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);\n        }\n        mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview)=>preview.replace(/-preview/, \"\"));\n    }\n    return mergedOptions;\n}\n// pkg/dist-src/util/add-query-parameters.js\nfunction addQueryParameters(url, parameters) {\n    const separator = /\\?/.test(url) ? \"&\" : \"?\";\n    const names = Object.keys(parameters);\n    if (names.length === 0) {\n        return url;\n    }\n    return url + separator + names.map((name)=>{\n        if (name === \"q\") {\n            return \"q=\" + parameters.q.split(\"+\").map(encodeURIComponent).join(\"+\");\n        }\n        return `${name}=${encodeURIComponent(parameters[name])}`;\n    }).join(\"&\");\n}\n// pkg/dist-src/util/extract-url-variable-names.js\nvar urlVariableRegex = /\\{[^}]+\\}/g;\nfunction removeNonChars(variableName) {\n    return variableName.replace(/^\\W+|\\W+$/g, \"\").split(/,/);\n}\nfunction extractUrlVariableNames(url) {\n    const matches = url.match(urlVariableRegex);\n    if (!matches) {\n        return [];\n    }\n    return matches.map(removeNonChars).reduce((a, b)=>a.concat(b), []);\n}\n// pkg/dist-src/util/omit.js\nfunction omit(object, keysToOmit) {\n    const result = {\n        __proto__: null\n    };\n    for (const key of Object.keys(object)){\n        if (keysToOmit.indexOf(key) === -1) {\n            result[key] = object[key];\n        }\n    }\n    return result;\n}\n// pkg/dist-src/util/url-template.js\nfunction encodeReserved(str) {\n    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {\n        if (!/%[0-9A-Fa-f]/.test(part)) {\n            part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n        }\n        return part;\n    }).join(\"\");\n}\nfunction encodeUnreserved(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\nfunction encodeValue(operator, value, key) {\n    value = operator === \"+\" || operator === \"#\" ? encodeReserved(value) : encodeUnreserved(value);\n    if (key) {\n        return encodeUnreserved(key) + \"=\" + value;\n    } else {\n        return value;\n    }\n}\nfunction isDefined(value) {\n    return value !== void 0 && value !== null;\n}\nfunction isKeyOperator(operator) {\n    return operator === \";\" || operator === \"&\" || operator === \"?\";\n}\nfunction getValues(context, operator, key, modifier) {\n    var value = context[key], result = [];\n    if (isDefined(value) && value !== \"\") {\n        if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n            value = value.toString();\n            if (modifier && modifier !== \"*\") {\n                value = value.substring(0, parseInt(modifier, 10));\n            }\n            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : \"\"));\n        } else {\n            if (modifier === \"*\") {\n                if (Array.isArray(value)) {\n                    value.filter(isDefined).forEach(function(value2) {\n                        result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : \"\"));\n                    });\n                } else {\n                    Object.keys(value).forEach(function(k) {\n                        if (isDefined(value[k])) {\n                            result.push(encodeValue(operator, value[k], k));\n                        }\n                    });\n                }\n            } else {\n                const tmp = [];\n                if (Array.isArray(value)) {\n                    value.filter(isDefined).forEach(function(value2) {\n                        tmp.push(encodeValue(operator, value2));\n                    });\n                } else {\n                    Object.keys(value).forEach(function(k) {\n                        if (isDefined(value[k])) {\n                            tmp.push(encodeUnreserved(k));\n                            tmp.push(encodeValue(operator, value[k].toString()));\n                        }\n                    });\n                }\n                if (isKeyOperator(operator)) {\n                    result.push(encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n                } else if (tmp.length !== 0) {\n                    result.push(tmp.join(\",\"));\n                }\n            }\n        }\n    } else {\n        if (operator === \";\") {\n            if (isDefined(value)) {\n                result.push(encodeUnreserved(key));\n            }\n        } else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n            result.push(encodeUnreserved(key) + \"=\");\n        } else if (value === \"\") {\n            result.push(\"\");\n        }\n    }\n    return result;\n}\nfunction parseUrl(template) {\n    return {\n        expand: expand.bind(null, template)\n    };\n}\nfunction expand(template, context) {\n    var operators = [\n        \"+\",\n        \"#\",\n        \".\",\n        \"/\",\n        \";\",\n        \"?\",\n        \"&\"\n    ];\n    template = template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function(_, expression, literal) {\n        if (expression) {\n            let operator = \"\";\n            const values = [];\n            if (operators.indexOf(expression.charAt(0)) !== -1) {\n                operator = expression.charAt(0);\n                expression = expression.substr(1);\n            }\n            expression.split(/,/g).forEach(function(variable) {\n                var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n                values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n            });\n            if (operator && operator !== \"+\") {\n                var separator = \",\";\n                if (operator === \"?\") {\n                    separator = \"&\";\n                } else if (operator !== \"#\") {\n                    separator = operator;\n                }\n                return (values.length !== 0 ? operator : \"\") + values.join(separator);\n            } else {\n                return values.join(\",\");\n            }\n        } else {\n            return encodeReserved(literal);\n        }\n    });\n    if (template === \"/\") {\n        return template;\n    } else {\n        return template.replace(/\\/$/, \"\");\n    }\n}\n// pkg/dist-src/parse.js\nfunction parse(options) {\n    let method = options.method.toUpperCase();\n    let url = (options.url || \"/\").replace(/:([a-z]\\w+)/g, \"{$1}\");\n    let headers = Object.assign({}, options.headers);\n    let body;\n    let parameters = omit(options, [\n        \"method\",\n        \"baseUrl\",\n        \"url\",\n        \"headers\",\n        \"request\",\n        \"mediaType\"\n    ]);\n    const urlVariableNames = extractUrlVariableNames(url);\n    url = parseUrl(url).expand(parameters);\n    if (!/^http/.test(url)) {\n        url = options.baseUrl + url;\n    }\n    const omittedParameters = Object.keys(options).filter((option)=>urlVariableNames.includes(option)).concat(\"baseUrl\");\n    const remainingParameters = omit(parameters, omittedParameters);\n    const isBinaryRequest = /application\\/octet-stream/i.test(headers.accept);\n    if (!isBinaryRequest) {\n        if (options.mediaType.format) {\n            headers.accept = headers.accept.split(/,/).map((format)=>format.replace(/application\\/vnd(\\.\\w+)(\\.v3)?(\\.\\w+)?(\\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(\",\");\n        }\n        if (url.endsWith(\"/graphql\")) {\n            if (options.mediaType.previews?.length) {\n                const previewsFromAcceptHeader = headers.accept.match(/[\\w-]+(?=-preview)/g) || [];\n                headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview)=>{\n                    const format = options.mediaType.format ? `.${options.mediaType.format}` : \"+json\";\n                    return `application/vnd.github.${preview}-preview${format}`;\n                }).join(\",\");\n            }\n        }\n    }\n    if ([\n        \"GET\",\n        \"HEAD\"\n    ].includes(method)) {\n        url = addQueryParameters(url, remainingParameters);\n    } else {\n        if (\"data\" in remainingParameters) {\n            body = remainingParameters.data;\n        } else {\n            if (Object.keys(remainingParameters).length) {\n                body = remainingParameters;\n            }\n        }\n    }\n    if (!headers[\"content-type\"] && typeof body !== \"undefined\") {\n        headers[\"content-type\"] = \"application/json; charset=utf-8\";\n    }\n    if ([\n        \"PATCH\",\n        \"PUT\"\n    ].includes(method) && typeof body === \"undefined\") {\n        body = \"\";\n    }\n    return Object.assign({\n        method,\n        url,\n        headers\n    }, typeof body !== \"undefined\" ? {\n        body\n    } : null, options.request ? {\n        request: options.request\n    } : null);\n}\n// pkg/dist-src/endpoint-with-defaults.js\nfunction endpointWithDefaults(defaults, route, options) {\n    return parse(merge(defaults, route, options));\n}\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(oldDefaults, newDefaults) {\n    const DEFAULTS2 = merge(oldDefaults, newDefaults);\n    const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);\n    return Object.assign(endpoint2, {\n        DEFAULTS: DEFAULTS2,\n        defaults: withDefaults.bind(null, DEFAULTS2),\n        merge: merge.bind(null, DEFAULTS2),\n        parse\n    });\n}\n// pkg/dist-src/index.js\nvar endpoint = withDefaults(null, DEFAULTS);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvZW5kcG9pbnQvZGlzdC1ub2RlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJGLE9BQU9HLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JKLE9BQU9LLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlTixPQUFPTyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsV0FBVyxDQUFDQyxRQUFRQztJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZaLFVBQVVXLFFBQVFFLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVFLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT2hCLGtCQUFrQmEsTUFDaEMsSUFBSSxDQUFDWCxhQUFhZSxJQUFJLENBQUNMLElBQUlJLFFBQVFBLFFBQVFGLFFBQ3pDbkIsVUFBVWlCLElBQUlJLEtBQUs7WUFBRVAsS0FBSyxJQUFNSSxJQUFJLENBQUNHLElBQUk7WUFBRU4sWUFBWSxDQUFFSyxDQUFBQSxPQUFPakIsaUJBQWlCZSxNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVloQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUV5QixPQUFPO0lBQUssSUFBSUQ7QUFFdEYsd0JBQXdCO0FBQ3hCLElBQUlFLG1CQUFtQixDQUFDO0FBQ3hCaEIsU0FBU2dCLGtCQUFrQjtJQUN6QkMsVUFBVSxJQUFNQTtBQUNsQjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdOLGFBQWFHO0FBRTlCLDJCQUEyQjtBQUMzQixJQUFJSSw4QkFB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LFdBQVdxSCxhQUFhLE1BQU03RztBQUNsQyw2REFBNkQ7QUFDN0QsS0FBTVAsQ0FBQUEsQ0FFTiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9lbmRwb2ludC9kaXN0LW5vZGUvaW5kZXguanM/OTAzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHBrZy9kaXN0LXNyYy9pbmRleC5qc1xudmFyIGRpc3Rfc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGRpc3Rfc3JjX2V4cG9ydHMsIHtcbiAgZW5kcG9pbnQ6ICgpID0+IGVuZHBvaW50XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGRpc3Rfc3JjX2V4cG9ydHMpO1xuXG4vLyBwa2cvZGlzdC1zcmMvZGVmYXVsdHMuanNcbnZhciBpbXBvcnRfdW5pdmVyc2FsX3VzZXJfYWdlbnQgPSByZXF1aXJlKFwidW5pdmVyc2FsLXVzZXItYWdlbnRcIik7XG5cbi8vIHBrZy9kaXN0LXNyYy92ZXJzaW9uLmpzXG52YXIgVkVSU0lPTiA9IFwiOS4wLjVcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2RlZmF1bHRzLmpzXG52YXIgdXNlckFnZW50ID0gYG9jdG9raXQtZW5kcG9pbnQuanMvJHtWRVJTSU9OfSAkeygwLCBpbXBvcnRfdW5pdmVyc2FsX3VzZXJfYWdlbnQuZ2V0VXNlckFnZW50KSgpfWA7XG52YXIgREVGQVVMVFMgPSB7XG4gIG1ldGhvZDogXCJHRVRcIixcbiAgYmFzZVVybDogXCJodHRwczovL2FwaS5naXRodWIuY29tXCIsXG4gIGhlYWRlcnM6IHtcbiAgICBhY2NlcHQ6IFwiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52Mytqc29uXCIsXG4gICAgXCJ1c2VyLWFnZW50XCI6IHVzZXJBZ2VudFxuICB9LFxuICBtZWRpYVR5cGU6IHtcbiAgICBmb3JtYXQ6IFwiXCJcbiAgfVxufTtcblxuLy8gcGtnL2Rpc3Qtc3JjL3V0aWwvbG93ZXJjYXNlLWtleXMuanNcbmZ1bmN0aW9uIGxvd2VyY2FzZUtleXMob2JqZWN0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLnJlZHVjZSgobmV3T2JqLCBrZXkpID0+IHtcbiAgICBuZXdPYmpba2V5LnRvTG93ZXJDYXNlKCldID0gb2JqZWN0W2tleV07XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfSwge30pO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvdXRpbC9pcy1wbGFpbi1vYmplY3QuanNcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICE9PSBcIltvYmplY3QgT2JqZWN0XVwiKVxuICAgIHJldHVybiBmYWxzZTtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpXG4gICAgcmV0dXJuIHRydWU7XG4gIGNvbnN0IEN0b3IgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsKEN0b3IpID09PSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCh2YWx1ZSk7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy91dGlsL21lcmdlLWRlZXAuanNcbmZ1bmN0aW9uIG1lcmdlRGVlcChkZWZhdWx0cywgb3B0aW9ucykge1xuICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cyk7XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbnNba2V5XSkpIHtcbiAgICAgIGlmICghKGtleSBpbiBkZWZhdWx0cykpXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7IFtrZXldOiBvcHRpb25zW2tleV0gfSk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2VEZWVwKGRlZmF1bHRzW2tleV0sIG9wdGlvbnNba2V5XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7IFtrZXldOiBvcHRpb25zW2tleV0gfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL3V0aWwvcmVtb3ZlLXVuZGVmaW5lZC1wcm9wZXJ0aWVzLmpzXG5mdW5jdGlvbiByZW1vdmVVbmRlZmluZWRQcm9wZXJ0aWVzKG9iaikge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqW2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvbWVyZ2UuanNcbmZ1bmN0aW9uIG1lcmdlKGRlZmF1bHRzLCByb3V0ZSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHJvdXRlID09PSBcInN0cmluZ1wiKSB7XG4gICAgbGV0IFttZXRob2QsIHVybF0gPSByb3V0ZS5zcGxpdChcIiBcIik7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odXJsID8geyBtZXRob2QsIHVybCB9IDogeyB1cmw6IG1ldGhvZCB9LCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgcm91dGUpO1xuICB9XG4gIG9wdGlvbnMuaGVhZGVycyA9IGxvd2VyY2FzZUtleXMob3B0aW9ucy5oZWFkZXJzKTtcbiAgcmVtb3ZlVW5kZWZpbmVkUHJvcGVydGllcyhvcHRpb25zKTtcbiAgcmVtb3ZlVW5kZWZpbmVkUHJvcGVydGllcyhvcHRpb25zLmhlYWRlcnMpO1xuICBjb25zdCBtZXJnZWRPcHRpb25zID0gbWVyZ2VEZWVwKGRlZmF1bHRzIHx8IHt9LCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMudXJsID09PSBcIi9ncmFwaHFsXCIpIHtcbiAgICBpZiAoZGVmYXVsdHMgJiYgZGVmYXVsdHMubWVkaWFUeXBlLnByZXZpZXdzPy5sZW5ndGgpIHtcbiAgICAgIG1lcmdlZE9wdGlvbnMubWVkaWFUeXBlLnByZXZpZXdzID0gZGVmYXVsdHMubWVkaWFUeXBlLnByZXZpZXdzLmZpbHRlcihcbiAgICAgICAgKHByZXZpZXcpID0+ICFtZXJnZWRPcHRpb25zLm1lZGlhVHlwZS5wcmV2aWV3cy5pbmNsdWRlcyhwcmV2aWV3KVxuICAgICAgKS5jb25jYXQobWVyZ2VkT3B0aW9ucy5tZWRpYVR5cGUucHJldmlld3MpO1xuICAgIH1cbiAgICBtZXJnZWRPcHRpb25zLm1lZGlhVHlwZS5wcmV2aWV3cyA9IChtZXJnZWRPcHRpb25zLm1lZGlhVHlwZS5wcmV2aWV3cyB8fCBbXSkubWFwKChwcmV2aWV3KSA9PiBwcmV2aWV3LnJlcGxhY2UoLy1wcmV2aWV3LywgXCJcIikpO1xuICB9XG4gIHJldHVybiBtZXJnZWRPcHRpb25zO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvdXRpbC9hZGQtcXVlcnktcGFyYW1ldGVycy5qc1xuZnVuY3Rpb24gYWRkUXVlcnlQYXJhbWV0ZXJzKHVybCwgcGFyYW1ldGVycykge1xuICBjb25zdCBzZXBhcmF0b3IgPSAvXFw/Ly50ZXN0KHVybCkgPyBcIiZcIiA6IFwiP1wiO1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpO1xuICBpZiAobmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICByZXR1cm4gdXJsICsgc2VwYXJhdG9yICsgbmFtZXMubWFwKChuYW1lKSA9PiB7XG4gICAgaWYgKG5hbWUgPT09IFwicVwiKSB7XG4gICAgICByZXR1cm4gXCJxPVwiICsgcGFyYW1ldGVycy5xLnNwbGl0KFwiK1wiKS5tYXAoZW5jb2RlVVJJQ29tcG9uZW50KS5qb2luKFwiK1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGAke25hbWV9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtZXRlcnNbbmFtZV0pfWA7XG4gIH0pLmpvaW4oXCImXCIpO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvdXRpbC9leHRyYWN0LXVybC12YXJpYWJsZS1uYW1lcy5qc1xudmFyIHVybFZhcmlhYmxlUmVnZXggPSAvXFx7W159XStcXH0vZztcbmZ1bmN0aW9uIHJlbW92ZU5vbkNoYXJzKHZhcmlhYmxlTmFtZSkge1xuICByZXR1cm4gdmFyaWFibGVOYW1lLnJlcGxhY2UoL15cXFcrfFxcVyskL2csIFwiXCIpLnNwbGl0KC8sLyk7XG59XG5mdW5jdGlvbiBleHRyYWN0VXJsVmFyaWFibGVOYW1lcyh1cmwpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IHVybC5tYXRjaCh1cmxWYXJpYWJsZVJlZ2V4KTtcbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBtYXRjaGVzLm1hcChyZW1vdmVOb25DaGFycykucmVkdWNlKChhLCBiKSA9PiBhLmNvbmNhdChiKSwgW10pO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvdXRpbC9vbWl0LmpzXG5mdW5jdGlvbiBvbWl0KG9iamVjdCwga2V5c1RvT21pdCkge1xuICBjb25zdCByZXN1bHQgPSB7IF9fcHJvdG9fXzogbnVsbCB9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG4gICAgaWYgKGtleXNUb09taXQuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL3V0aWwvdXJsLXRlbXBsYXRlLmpzXG5mdW5jdGlvbiBlbmNvZGVSZXNlcnZlZChzdHIpIHtcbiAgcmV0dXJuIHN0ci5zcGxpdCgvKCVbMC05QS1GYS1mXXsyfSkvZykubWFwKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICBpZiAoIS8lWzAtOUEtRmEtZl0vLnRlc3QocGFydCkpIHtcbiAgICAgIHBhcnQgPSBlbmNvZGVVUkkocGFydCkucmVwbGFjZSgvJTVCL2csIFwiW1wiKS5yZXBsYWNlKC8lNUQvZywgXCJdXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcGFydDtcbiAgfSkuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIGVuY29kZVVucmVzZXJ2ZWQoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gXCIlXCIgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZW5jb2RlVmFsdWUob3BlcmF0b3IsIHZhbHVlLCBrZXkpIHtcbiAgdmFsdWUgPSBvcGVyYXRvciA9PT0gXCIrXCIgfHwgb3BlcmF0b3IgPT09IFwiI1wiID8gZW5jb2RlUmVzZXJ2ZWQodmFsdWUpIDogZW5jb2RlVW5yZXNlcnZlZCh2YWx1ZSk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gZW5jb2RlVW5yZXNlcnZlZChrZXkpICsgXCI9XCIgKyB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZvaWQgMCAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzS2V5T3BlcmF0b3Iob3BlcmF0b3IpIHtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSBcIjtcIiB8fCBvcGVyYXRvciA9PT0gXCImXCIgfHwgb3BlcmF0b3IgPT09IFwiP1wiO1xufVxuZnVuY3Rpb24gZ2V0VmFsdWVzKGNvbnRleHQsIG9wZXJhdG9yLCBrZXksIG1vZGlmaWVyKSB7XG4gIHZhciB2YWx1ZSA9IGNvbnRleHRba2V5XSwgcmVzdWx0ID0gW107XG4gIGlmIChpc0RlZmluZWQodmFsdWUpICYmIHZhbHVlICE9PSBcIlwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgaWYgKG1vZGlmaWVyICYmIG1vZGlmaWVyICE9PSBcIipcIikge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCBwYXJzZUludChtb2RpZmllciwgMTApKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICBlbmNvZGVWYWx1ZShvcGVyYXRvciwgdmFsdWUsIGlzS2V5T3BlcmF0b3Iob3BlcmF0b3IpID8ga2V5IDogXCJcIilcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtb2RpZmllciA9PT0gXCIqXCIpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUuZmlsdGVyKGlzRGVmaW5lZCkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZTIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBlbmNvZGVWYWx1ZShvcGVyYXRvciwgdmFsdWUyLCBpc0tleU9wZXJhdG9yKG9wZXJhdG9yKSA/IGtleSA6IFwiXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQodmFsdWVba10pKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZVZhbHVlKG9wZXJhdG9yLCB2YWx1ZVtrXSwgaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0bXAgPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUuZmlsdGVyKGlzRGVmaW5lZCkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZTIpIHtcbiAgICAgICAgICAgIHRtcC5wdXNoKGVuY29kZVZhbHVlKG9wZXJhdG9yLCB2YWx1ZTIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlW2tdKSkge1xuICAgICAgICAgICAgICB0bXAucHVzaChlbmNvZGVVbnJlc2VydmVkKGspKTtcbiAgICAgICAgICAgICAgdG1wLnB1c2goZW5jb2RlVmFsdWUob3BlcmF0b3IsIHZhbHVlW2tdLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNLZXlPcGVyYXRvcihvcGVyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGVVbnJlc2VydmVkKGtleSkgKyBcIj1cIiArIHRtcC5qb2luKFwiLFwiKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodG1wLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHRtcC5qb2luKFwiLFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKG9wZXJhdG9yID09PSBcIjtcIikge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVW5yZXNlcnZlZChrZXkpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBcIlwiICYmIChvcGVyYXRvciA9PT0gXCImXCIgfHwgb3BlcmF0b3IgPT09IFwiP1wiKSkge1xuICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVW5yZXNlcnZlZChrZXkpICsgXCI9XCIpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgIHJlc3VsdC5wdXNoKFwiXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGFyc2VVcmwodGVtcGxhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBleHBhbmQ6IGV4cGFuZC5iaW5kKG51bGwsIHRlbXBsYXRlKVxuICB9O1xufVxuZnVuY3Rpb24gZXhwYW5kKHRlbXBsYXRlLCBjb250ZXh0KSB7XG4gIHZhciBvcGVyYXRvcnMgPSBbXCIrXCIsIFwiI1wiLCBcIi5cIiwgXCIvXCIsIFwiO1wiLCBcIj9cIiwgXCImXCJdO1xuICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoXG4gICAgL1xceyhbXlxce1xcfV0rKVxcfXwoW15cXHtcXH1dKykvZyxcbiAgICBmdW5jdGlvbihfLCBleHByZXNzaW9uLCBsaXRlcmFsKSB7XG4gICAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgICBsZXQgb3BlcmF0b3IgPSBcIlwiO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgaWYgKG9wZXJhdG9ycy5pbmRleE9mKGV4cHJlc3Npb24uY2hhckF0KDApKSAhPT0gLTEpIHtcbiAgICAgICAgICBvcGVyYXRvciA9IGV4cHJlc3Npb24uY2hhckF0KDApO1xuICAgICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgICBleHByZXNzaW9uLnNwbGl0KC8sL2cpLmZvckVhY2goZnVuY3Rpb24odmFyaWFibGUpIHtcbiAgICAgICAgICB2YXIgdG1wID0gLyhbXjpcXCpdKikoPzo6KFxcZCspfChcXCopKT8vLmV4ZWModmFyaWFibGUpO1xuICAgICAgICAgIHZhbHVlcy5wdXNoKGdldFZhbHVlcyhjb250ZXh0LCBvcGVyYXRvciwgdG1wWzFdLCB0bXBbMl0gfHwgdG1wWzNdKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3BlcmF0b3IgJiYgb3BlcmF0b3IgIT09IFwiK1wiKSB7XG4gICAgICAgICAgdmFyIHNlcGFyYXRvciA9IFwiLFwiO1xuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFwiJlwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgIT09IFwiI1wiKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICh2YWx1ZXMubGVuZ3RoICE9PSAwID8gb3BlcmF0b3IgOiBcIlwiKSArIHZhbHVlcy5qb2luKHNlcGFyYXRvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlcy5qb2luKFwiLFwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVJlc2VydmVkKGxpdGVyYWwpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgaWYgKHRlbXBsYXRlID09PSBcIi9cIikge1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFwvJC8sIFwiXCIpO1xuICB9XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9wYXJzZS5qc1xuZnVuY3Rpb24gcGFyc2Uob3B0aW9ucykge1xuICBsZXQgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgbGV0IHVybCA9IChvcHRpb25zLnVybCB8fCBcIi9cIikucmVwbGFjZSgvOihbYS16XVxcdyspL2csIFwieyQxfVwiKTtcbiAgbGV0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmhlYWRlcnMpO1xuICBsZXQgYm9keTtcbiAgbGV0IHBhcmFtZXRlcnMgPSBvbWl0KG9wdGlvbnMsIFtcbiAgICBcIm1ldGhvZFwiLFxuICAgIFwiYmFzZVVybFwiLFxuICAgIFwidXJsXCIsXG4gICAgXCJoZWFkZXJzXCIsXG4gICAgXCJyZXF1ZXN0XCIsXG4gICAgXCJtZWRpYVR5cGVcIlxuICBdKTtcbiAgY29uc3QgdXJsVmFyaWFibGVOYW1lcyA9IGV4dHJhY3RVcmxWYXJpYWJsZU5hbWVzKHVybCk7XG4gIHVybCA9IHBhcnNlVXJsKHVybCkuZXhwYW5kKHBhcmFtZXRlcnMpO1xuICBpZiAoIS9eaHR0cC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gb3B0aW9ucy5iYXNlVXJsICsgdXJsO1xuICB9XG4gIGNvbnN0IG9taXR0ZWRQYXJhbWV0ZXJzID0gT2JqZWN0LmtleXMob3B0aW9ucykuZmlsdGVyKChvcHRpb24pID0+IHVybFZhcmlhYmxlTmFtZXMuaW5jbHVkZXMob3B0aW9uKSkuY29uY2F0KFwiYmFzZVVybFwiKTtcbiAgY29uc3QgcmVtYWluaW5nUGFyYW1ldGVycyA9IG9taXQocGFyYW1ldGVycywgb21pdHRlZFBhcmFtZXRlcnMpO1xuICBjb25zdCBpc0JpbmFyeVJlcXVlc3QgPSAvYXBwbGljYXRpb25cXC9vY3RldC1zdHJlYW0vaS50ZXN0KGhlYWRlcnMuYWNjZXB0KTtcbiAgaWYgKCFpc0JpbmFyeVJlcXVlc3QpIHtcbiAgICBpZiAob3B0aW9ucy5tZWRpYVR5cGUuZm9ybWF0KSB7XG4gICAgICBoZWFkZXJzLmFjY2VwdCA9IGhlYWRlcnMuYWNjZXB0LnNwbGl0KC8sLykubWFwKFxuICAgICAgICAoZm9ybWF0KSA9PiBmb3JtYXQucmVwbGFjZShcbiAgICAgICAgICAvYXBwbGljYXRpb25cXC92bmQoXFwuXFx3KykoXFwudjMpPyhcXC5cXHcrKT8oXFwranNvbik/JC8sXG4gICAgICAgICAgYGFwcGxpY2F0aW9uL3ZuZCQxJDIuJHtvcHRpb25zLm1lZGlhVHlwZS5mb3JtYXR9YFxuICAgICAgICApXG4gICAgICApLmpvaW4oXCIsXCIpO1xuICAgIH1cbiAgICBpZiAodXJsLmVuZHNXaXRoKFwiL2dyYXBocWxcIikpIHtcbiAgICAgIGlmIChvcHRpb25zLm1lZGlhVHlwZS5wcmV2aWV3cz8ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHByZXZpZXdzRnJvbUFjY2VwdEhlYWRlciA9IGhlYWRlcnMuYWNjZXB0Lm1hdGNoKC9bXFx3LV0rKD89LXByZXZpZXcpL2cpIHx8IFtdO1xuICAgICAgICBoZWFkZXJzLmFjY2VwdCA9IHByZXZpZXdzRnJvbUFjY2VwdEhlYWRlci5jb25jYXQob3B0aW9ucy5tZWRpYVR5cGUucHJldmlld3MpLm1hcCgocHJldmlldykgPT4ge1xuICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IG9wdGlvbnMubWVkaWFUeXBlLmZvcm1hdCA/IGAuJHtvcHRpb25zLm1lZGlhVHlwZS5mb3JtYXR9YCA6IFwiK2pzb25cIjtcbiAgICAgICAgICByZXR1cm4gYGFwcGxpY2F0aW9uL3ZuZC5naXRodWIuJHtwcmV2aWV3fS1wcmV2aWV3JHtmb3JtYXR9YDtcbiAgICAgICAgfSkuam9pbihcIixcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChbXCJHRVRcIiwgXCJIRUFEXCJdLmluY2x1ZGVzKG1ldGhvZCkpIHtcbiAgICB1cmwgPSBhZGRRdWVyeVBhcmFtZXRlcnModXJsLCByZW1haW5pbmdQYXJhbWV0ZXJzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoXCJkYXRhXCIgaW4gcmVtYWluaW5nUGFyYW1ldGVycykge1xuICAgICAgYm9keSA9IHJlbWFpbmluZ1BhcmFtZXRlcnMuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHJlbWFpbmluZ1BhcmFtZXRlcnMpLmxlbmd0aCkge1xuICAgICAgICBib2R5ID0gcmVtYWluaW5nUGFyYW1ldGVycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFoZWFkZXJzW1wiY29udGVudC10eXBlXCJdICYmIHR5cGVvZiBib2R5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiO1xuICB9XG4gIGlmIChbXCJQQVRDSFwiLCBcIlBVVFwiXS5pbmNsdWRlcyhtZXRob2QpICYmIHR5cGVvZiBib2R5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgYm9keSA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgeyBtZXRob2QsIHVybCwgaGVhZGVycyB9LFxuICAgIHR5cGVvZiBib2R5ICE9PSBcInVuZGVmaW5lZFwiID8geyBib2R5IH0gOiBudWxsLFxuICAgIG9wdGlvbnMucmVxdWVzdCA/IHsgcmVxdWVzdDogb3B0aW9ucy5yZXF1ZXN0IH0gOiBudWxsXG4gICk7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9lbmRwb2ludC13aXRoLWRlZmF1bHRzLmpzXG5mdW5jdGlvbiBlbmRwb2ludFdpdGhEZWZhdWx0cyhkZWZhdWx0cywgcm91dGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHBhcnNlKG1lcmdlKGRlZmF1bHRzLCByb3V0ZSwgb3B0aW9ucykpO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvd2l0aC1kZWZhdWx0cy5qc1xuZnVuY3Rpb24gd2l0aERlZmF1bHRzKG9sZERlZmF1bHRzLCBuZXdEZWZhdWx0cykge1xuICBjb25zdCBERUZBVUxUUzIgPSBtZXJnZShvbGREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICBjb25zdCBlbmRwb2ludDIgPSBlbmRwb2ludFdpdGhEZWZhdWx0cy5iaW5kKG51bGwsIERFRkFVTFRTMik7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGVuZHBvaW50Miwge1xuICAgIERFRkFVTFRTOiBERUZBVUxUUzIsXG4gICAgZGVmYXVsdHM6IHdpdGhEZWZhdWx0cy5iaW5kKG51bGwsIERFRkFVTFRTMiksXG4gICAgbWVyZ2U6IG1lcmdlLmJpbmQobnVsbCwgREVGQVVMVFMyKSxcbiAgICBwYXJzZVxuICB9KTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgZW5kcG9pbnQgPSB3aXRoRGVmYXVsdHMobnVsbCwgREVGQVVMVFMpO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuZHBvaW50XG59KTtcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX190b0NvbW1vbkpTIiwibW9kIiwidmFsdWUiLCJkaXN0X3NyY19leHBvcnRzIiwiZW5kcG9pbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3VuaXZlcnNhbF91c2VyX2FnZW50IiwicmVxdWlyZSIsIlZFUlNJT04iLCJ1c2VyQWdlbnQiLCJnZXRVc2VyQWdlbnQiLCJERUZBVUxUUyIsIm1ldGhvZCIsImJhc2VVcmwiLCJoZWFkZXJzIiwiYWNjZXB0IiwibWVkaWFUeXBlIiwiZm9ybWF0IiwibG93ZXJjYXNlS2V5cyIsIm9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJuZXdPYmoiLCJ0b0xvd2VyQ2FzZSIsImlzUGxhaW5PYmplY3QiLCJ0b1N0cmluZyIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJDdG9yIiwiY29uc3RydWN0b3IiLCJGdW5jdGlvbiIsIm1lcmdlRGVlcCIsImRlZmF1bHRzIiwib3B0aW9ucyIsInJlc3VsdCIsImFzc2lnbiIsImZvckVhY2giLCJyZW1vdmVVbmRlZmluZWRQcm9wZXJ0aWVzIiwib2JqIiwibWVyZ2UiLCJyb3V0ZSIsInVybCIsInNwbGl0IiwibWVyZ2VkT3B0aW9ucyIsInByZXZpZXdzIiwibGVuZ3RoIiwiZmlsdGVyIiwicHJldmlldyIsImluY2x1ZGVzIiwiY29uY2F0IiwibWFwIiwicmVwbGFjZSIsImFkZFF1ZXJ5UGFyYW1ldGVycyIsInBhcmFtZXRlcnMiLCJzZXBhcmF0b3IiLCJ0ZXN0IiwibmFtZXMiLCJxIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsInVybFZhcmlhYmxlUmVnZXgiLCJyZW1vdmVOb25DaGFycyIsInZhcmlhYmxlTmFtZSIsImV4dHJhY3RVcmxWYXJpYWJsZU5hbWVzIiwibWF0Y2hlcyIsIm1hdGNoIiwiYSIsImIiLCJvbWl0Iiwia2V5c1RvT21pdCIsIl9fcHJvdG9fXyIsImluZGV4T2YiLCJlbmNvZGVSZXNlcnZlZCIsInN0ciIsInBhcnQiLCJlbmNvZGVVUkkiLCJlbmNvZGVVbnJlc2VydmVkIiwiYyIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsImVuY29kZVZhbHVlIiwib3BlcmF0b3IiLCJpc0RlZmluZWQiLCJpc0tleU9wZXJhdG9yIiwiZ2V0VmFsdWVzIiwiY29udGV4dCIsIm1vZGlmaWVyIiwic3Vic3RyaW5nIiwicGFyc2VJbnQiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwidmFsdWUyIiwiayIsInRtcCIsInBhcnNlVXJsIiwidGVtcGxhdGUiLCJleHBhbmQiLCJiaW5kIiwib3BlcmF0b3JzIiwiXyIsImV4cHJlc3Npb24iLCJsaXRlcmFsIiwidmFsdWVzIiwiY2hhckF0Iiwic3Vic3RyIiwidmFyaWFibGUiLCJleGVjIiwicGFyc2UiLCJib2R5IiwidXJsVmFyaWFibGVOYW1lcyIsIm9taXR0ZWRQYXJhbWV0ZXJzIiwib3B0aW9uIiwicmVtYWluaW5nUGFyYW1ldGVycyIsImlzQmluYXJ5UmVxdWVzdCIsImVuZHNXaXRoIiwicHJldmlld3NGcm9tQWNjZXB0SGVhZGVyIiwiZGF0YSIsInJlcXVlc3QiLCJlbmRwb2ludFdpdGhEZWZhdWx0cyIsIndpdGhEZWZhdWx0cyIsIm9sZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJERUZBVUxUUzIiLCJlbmRwb2ludDIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/endpoint/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/graphql/dist-node/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@octokit/graphql/dist-node/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    GraphqlResponseError: ()=>GraphqlResponseError,\n    graphql: ()=>graphql2,\n    withCustomRequest: ()=>withCustomRequest\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_request3 = __webpack_require__(/*! @octokit/request */ \"(rsc)/./node_modules/@octokit/request/dist-node/index.js\");\nvar import_universal_user_agent = __webpack_require__(/*! universal-user-agent */ \"(rsc)/./node_modules/universal-user-agent/dist-node/index.js\");\n// pkg/dist-src/version.js\nvar VERSION = \"7.1.0\";\n// pkg/dist-src/with-defaults.js\nvar import_request2 = __webpack_require__(/*! @octokit/request */ \"(rsc)/./node_modules/@octokit/request/dist-node/index.js\");\n// pkg/dist-src/graphql.js\nvar import_request = __webpack_require__(/*! @octokit/request */ \"(rsc)/./node_modules/@octokit/request/dist-node/index.js\");\n// pkg/dist-src/error.js\nfunction _buildMessageForResponseErrors(data) {\n    return `Request failed due to following response errors:\n` + data.errors.map((e)=>` - ${e.message}`).join(\"\\n\");\n}\nvar GraphqlResponseError = class extends Error {\n    constructor(request2, headers, response){\n        super(_buildMessageForResponseErrors(response));\n        this.request = request2;\n        this.headers = headers;\n        this.response = response;\n        this.name = \"GraphqlResponseError\";\n        this.errors = response.errors;\n        this.data = response.data;\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n};\n// pkg/dist-src/graphql.js\nvar NON_VARIABLE_OPTIONS = [\n    \"method\",\n    \"baseUrl\",\n    \"url\",\n    \"headers\",\n    \"request\",\n    \"query\",\n    \"mediaType\"\n];\nvar FORBIDDEN_VARIABLE_OPTIONS = [\n    \"query\",\n    \"method\",\n    \"url\"\n];\nvar GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\nfunction graphql(request2, query, options) {\n    if (options) {\n        if (typeof query === \"string\" && \"query\" in options) {\n            return Promise.reject(new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`));\n        }\n        for(const key in options){\n            if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;\n            return Promise.reject(new Error(`[@octokit/graphql] \"${key}\" cannot be used as variable name`));\n        }\n    }\n    const parsedOptions = typeof query === \"string\" ? Object.assign({\n        query\n    }, options) : query;\n    const requestOptions = Object.keys(parsedOptions).reduce((result, key)=>{\n        if (NON_VARIABLE_OPTIONS.includes(key)) {\n            result[key] = parsedOptions[key];\n            return result;\n        }\n        if (!result.variables) {\n            result.variables = {};\n        }\n        result.variables[key] = parsedOptions[key];\n        return result;\n    }, {});\n    const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;\n    if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n    }\n    return request2(requestOptions).then((response)=>{\n        if (response.data.errors) {\n            const headers = {};\n            for (const key of Object.keys(response.headers)){\n                headers[key] = response.headers[key];\n            }\n            throw new GraphqlResponseError(requestOptions, headers, response.data);\n        }\n        return response.data.data;\n    });\n}\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(request2, newDefaults) {\n    const newRequest = request2.defaults(newDefaults);\n    const newApi = (query, options)=>{\n        return graphql(newRequest, query, options);\n    };\n    return Object.assign(newApi, {\n        defaults: withDefaults.bind(null, newRequest),\n        endpoint: newRequest.endpoint\n    });\n}\n// pkg/dist-src/index.js\nvar graphql2 = withDefaults(import_request3.request, {\n    headers: {\n        \"user-agent\": `octokit-graphql.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`\n    },\n    method: \"POST\",\n    url: \"/graphql\"\n});\nfunction withCustomRequest(customRequest) {\n    return withDefaults(customRequest, {\n        method: \"POST\",\n        url: \"/graphql\"\n    });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/graphql/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/plugin-paginate-rest/dist-node/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@octokit/plugin-paginate-rest/dist-node/index.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    composePaginateRest: ()=>composePaginateRest,\n    isPaginatingEndpoint: ()=>isPaginatingEndpoint,\n    paginateRest: ()=>paginateRest,\n    paginatingEndpoints: ()=>paginatingEndpoints\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n// pkg/dist-src/version.js\nvar VERSION = \"11.3.1\";\n// pkg/dist-src/normalize-paginated-list-response.js\nfunction normalizePaginatedListResponse(response) {\n    if (!response.data) {\n        return {\n            ...response,\n            data: []\n        };\n    }\n    const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n    if (!responseNeedsNormalization) return response;\n    const incompleteResults = response.data.incomplete_results;\n    const repositorySelection = response.data.repository_selection;\n    const totalCount = response.data.total_count;\n    delete response.data.incomplete_results;\n    delete response.data.repository_selection;\n    delete response.data.total_count;\n    const namespaceKey = Object.keys(response.data)[0];\n    const data = response.data[namespaceKey];\n    response.data = data;\n    if (typeof incompleteResults !== \"undefined\") {\n        response.data.incomplete_results = incompleteResults;\n    }\n    if (typeof repositorySelection !== \"undefined\") {\n        response.data.repository_selection = repositorySelection;\n    }\n    response.data.total_count = totalCount;\n    return response;\n}\n// pkg/dist-src/iterator.js\nfunction iterator(octokit, route, parameters) {\n    const options = typeof route === \"function\" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);\n    const requestMethod = typeof route === \"function\" ? route : octokit.request;\n    const method = options.method;\n    const headers = options.headers;\n    let url = options.url;\n    return {\n        [Symbol.asyncIterator]: ()=>({\n                async next () {\n                    if (!url) return {\n                        done: true\n                    };\n                    try {\n                        const response = await requestMethod({\n                            method,\n                            url,\n                            headers\n                        });\n                        const normalizedResponse = normalizePaginatedListResponse(response);\n                        url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n                        return {\n                            value: normalizedResponse\n                        };\n                    } catch (error) {\n                        if (error.status !== 409) throw error;\n                        url = \"\";\n                        return {\n                            value: {\n                                status: 200,\n                                headers: {},\n                                data: []\n                            }\n                        };\n                    }\n                }\n            })\n    };\n}\n// pkg/dist-src/paginate.js\nfunction paginate(octokit, route, parameters, mapFn) {\n    if (typeof parameters === \"function\") {\n        mapFn = parameters;\n        parameters = void 0;\n    }\n    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\nfunction gather(octokit, results, iterator2, mapFn) {\n    return iterator2.next().then((result)=>{\n        if (result.done) {\n            return results;\n        }\n        let earlyExit = false;\n        function done() {\n            earlyExit = true;\n        }\n        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n        if (earlyExit) {\n            return results;\n        }\n        return gather(octokit, results, iterator2, mapFn);\n    });\n}\n// pkg/dist-src/compose-paginate.js\nvar composePaginateRest = Object.assign(paginate, {\n    iterator\n});\n// pkg/dist-src/generated/paginating-endpoints.js\nvar paginatingEndpoints = [\n    \"GET /advisories\",\n    \"GET /app/hook/deliveries\",\n    \"GET /app/installation-requests\",\n    \"GET /app/installations\",\n    \"GET /assignments/{assignment_id}/accepted_assignments\",\n    \"GET /classrooms\",\n    \"GET /classrooms/{classroom_id}/assignments\",\n    \"GET /enterprises/{enterprise}/copilot/usage\",\n    \"GET /enterprises/{enterprise}/dependabot/alerts\",\n    \"GET /enterprises/{enterprise}/secret-scanning/alerts\",\n    \"GET /events\",\n    \"GET /gists\",\n    \"GET /gists/public\",\n    \"GET /gists/starred\",\n    \"GET /gists/{gist_id}/comments\",\n    \"GET /gists/{gist_id}/commits\",\n    \"GET /gists/{gist_id}/forks\",\n    \"GET /installation/repositories\",\n    \"GET /issues\",\n    \"GET /licenses\",\n    \"GET /marketplace_listing/plans\",\n    \"GET /marketplace_listing/plans/{plan_id}/accounts\",\n    \"GET /marketplace_listing/stubbed/plans\",\n    \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\",\n    \"GET /networks/{owner}/{repo}/events\",\n    \"GET /notifications\",\n    \"GET /organizations\",\n    \"GET /orgs/{org}/actions/cache/usage-by-repository\",\n    \"GET /orgs/{org}/actions/permissions/repositories\",\n    \"GET /orgs/{org}/actions/runners\",\n    \"GET /orgs/{org}/actions/secrets\",\n    \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n    \"GET /orgs/{org}/actions/variables\",\n    \"GET /orgs/{org}/actions/variables/{name}/repositories\",\n    \"GET /orgs/{org}/blocks\",\n    \"GET /orgs/{org}/code-scanning/alerts\",\n    \"GET /orgs/{org}/codespaces\",\n    \"GET /orgs/{org}/codespaces/secrets\",\n    \"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories\",\n    \"GET /orgs/{org}/copilot/billing/seats\",\n    \"GET /orgs/{org}/copilot/usage\",\n    \"GET /orgs/{org}/dependabot/alerts\",\n    \"GET /orgs/{org}/dependabot/secrets\",\n    \"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories\",\n    \"GET /orgs/{org}/events\",\n    \"GET /orgs/{org}/failed_invitations\",\n    \"GET /orgs/{org}/hooks\",\n    \"GET /orgs/{org}/hooks/{hook_id}/deliveries\",\n    \"GET /orgs/{org}/installations\",\n    \"GET /orgs/{org}/invitations\",\n    \"GET /orgs/{org}/invitations/{invitation_id}/teams\",\n    \"GET /orgs/{org}/issues\",\n    \"GET /orgs/{org}/members\",\n    \"GET /orgs/{org}/members/{username}/codespaces\",\n    \"GET /orgs/{org}/migrations\",\n    \"GET /orgs/{org}/migrations/{migration_id}/repositories\",\n    \"GET /orgs/{org}/organization-roles/{role_id}/teams\",\n    \"GET /orgs/{org}/organization-roles/{role_id}/users\",\n    \"GET /orgs/{org}/outside_collaborators\",\n    \"GET /orgs/{org}/packages\",\n    \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\",\n    \"GET /orgs/{org}/personal-access-token-requests\",\n    \"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories\",\n    \"GET /orgs/{org}/personal-access-tokens\",\n    \"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories\",\n    \"GET /orgs/{org}/projects\",\n    \"GET /orgs/{org}/properties/values\",\n    \"GET /orgs/{org}/public_members\",\n    \"GET /orgs/{org}/repos\",\n    \"GET /orgs/{org}/rulesets\",\n    \"GET /orgs/{org}/rulesets/rule-suites\",\n    \"GET /orgs/{org}/secret-scanning/alerts\",\n    \"GET /orgs/{org}/security-advisories\",\n    \"GET /orgs/{org}/team/{team_slug}/copilot/usage\",\n    \"GET /orgs/{org}/teams\",\n    \"GET /orgs/{org}/teams/{team_slug}/discussions\",\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n    \"GET /orgs/{org}/teams/{team_slug}/invitations\",\n    \"GET /orgs/{org}/teams/{team_slug}/members\",\n    \"GET /orgs/{org}/teams/{team_slug}/projects\",\n    \"GET /orgs/{org}/teams/{team_slug}/repos\",\n    \"GET /orgs/{org}/teams/{team_slug}/teams\",\n    \"GET /projects/columns/{column_id}/cards\",\n    \"GET /projects/{project_id}/collaborators\",\n    \"GET /projects/{project_id}/columns\",\n    \"GET /repos/{owner}/{repo}/actions/artifacts\",\n    \"GET /repos/{owner}/{repo}/actions/caches\",\n    \"GET /repos/{owner}/{repo}/actions/organization-secrets\",\n    \"GET /repos/{owner}/{repo}/actions/organization-variables\",\n    \"GET /repos/{owner}/{repo}/actions/runners\",\n    \"GET /repos/{owner}/{repo}/actions/runs\",\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\",\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs\",\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\",\n    \"GET /repos/{owner}/{repo}/actions/secrets\",\n    \"GET /repos/{owner}/{repo}/actions/variables\",\n    \"GET /repos/{owner}/{repo}/actions/workflows\",\n    \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\",\n    \"GET /repos/{owner}/{repo}/activity\",\n    \"GET /repos/{owner}/{repo}/assignees\",\n    \"GET /repos/{owner}/{repo}/branches\",\n    \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\",\n    \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\",\n    \"GET /repos/{owner}/{repo}/code-scanning/alerts\",\n    \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\",\n    \"GET /repos/{owner}/{repo}/code-scanning/analyses\",\n    \"GET /repos/{owner}/{repo}/codespaces\",\n    \"GET /repos/{owner}/{repo}/codespaces/devcontainers\",\n    \"GET /repos/{owner}/{repo}/codespaces/secrets\",\n    \"GET /repos/{owner}/{repo}/collaborators\",\n    \"GET /repos/{owner}/{repo}/comments\",\n    \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n    \"GET /repos/{owner}/{repo}/commits\",\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\",\n    \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\",\n    \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\",\n    \"GET /repos/{owner}/{repo}/commits/{ref}/status\",\n    \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\",\n    \"GET /repos/{owner}/{repo}/contributors\",\n    \"GET /repos/{owner}/{repo}/dependabot/alerts\",\n    \"GET /repos/{owner}/{repo}/dependabot/secrets\",\n    \"GET /repos/{owner}/{repo}/deployments\",\n    \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n    \"GET /repos/{owner}/{repo}/environments\",\n    \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\",\n    \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps\",\n    \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets\",\n    \"GET /repos/{owner}/{repo}/environments/{environment_name}/variables\",\n    \"GET /repos/{owner}/{repo}/events\",\n    \"GET /repos/{owner}/{repo}/forks\",\n    \"GET /repos/{owner}/{repo}/hooks\",\n    \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\",\n    \"GET /repos/{owner}/{repo}/invitations\",\n    \"GET /repos/{owner}/{repo}/issues\",\n    \"GET /repos/{owner}/{repo}/issues/comments\",\n    \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n    \"GET /repos/{owner}/{repo}/issues/events\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\",\n    \"GET /repos/{owner}/{repo}/keys\",\n    \"GET /repos/{owner}/{repo}/labels\",\n    \"GET /repos/{owner}/{repo}/milestones\",\n    \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\",\n    \"GET /repos/{owner}/{repo}/notifications\",\n    \"GET /repos/{owner}/{repo}/pages/builds\",\n    \"GET /repos/{owner}/{repo}/projects\",\n    \"GET /repos/{owner}/{repo}/pulls\",\n    \"GET /repos/{owner}/{repo}/pulls/comments\",\n    \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\",\n    \"GET /repos/{owner}/{repo}/releases\",\n    \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\",\n    \"GET /repos/{owner}/{repo}/releases/{release_id}/reactions\",\n    \"GET /repos/{owner}/{repo}/rules/branches/{branch}\",\n    \"GET /repos/{owner}/{repo}/rulesets\",\n    \"GET /repos/{owner}/{repo}/rulesets/rule-suites\",\n    \"GET /repos/{owner}/{repo}/secret-scanning/alerts\",\n    \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations\",\n    \"GET /repos/{owner}/{repo}/security-advisories\",\n    \"GET /repos/{owner}/{repo}/stargazers\",\n    \"GET /repos/{owner}/{repo}/subscribers\",\n    \"GET /repos/{owner}/{repo}/tags\",\n    \"GET /repos/{owner}/{repo}/teams\",\n    \"GET /repos/{owner}/{repo}/topics\",\n    \"GET /repositories\",\n    \"GET /search/code\",\n    \"GET /search/commits\",\n    \"GET /search/issues\",\n    \"GET /search/labels\",\n    \"GET /search/repositories\",\n    \"GET /search/topics\",\n    \"GET /search/users\",\n    \"GET /teams/{team_id}/discussions\",\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments\",\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n    \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\",\n    \"GET /teams/{team_id}/invitations\",\n    \"GET /teams/{team_id}/members\",\n    \"GET /teams/{team_id}/projects\",\n    \"GET /teams/{team_id}/repos\",\n    \"GET /teams/{team_id}/teams\",\n    \"GET /user/blocks\",\n    \"GET /user/codespaces\",\n    \"GET /user/codespaces/secrets\",\n    \"GET /user/emails\",\n    \"GET /user/followers\",\n    \"GET /user/following\",\n    \"GET /user/gpg_keys\",\n    \"GET /user/installations\",\n    \"GET /user/installations/{installation_id}/repositories\",\n    \"GET /user/issues\",\n    \"GET /user/keys\",\n    \"GET /user/marketplace_purchases\",\n    \"GET /user/marketplace_purchases/stubbed\",\n    \"GET /user/memberships/orgs\",\n    \"GET /user/migrations\",\n    \"GET /user/migrations/{migration_id}/repositories\",\n    \"GET /user/orgs\",\n    \"GET /user/packages\",\n    \"GET /user/packages/{package_type}/{package_name}/versions\",\n    \"GET /user/public_emails\",\n    \"GET /user/repos\",\n    \"GET /user/repository_invitations\",\n    \"GET /user/social_accounts\",\n    \"GET /user/ssh_signing_keys\",\n    \"GET /user/starred\",\n    \"GET /user/subscriptions\",\n    \"GET /user/teams\",\n    \"GET /users\",\n    \"GET /users/{username}/events\",\n    \"GET /users/{username}/events/orgs/{org}\",\n    \"GET /users/{username}/events/public\",\n    \"GET /users/{username}/followers\",\n    \"GET /users/{username}/following\",\n    \"GET /users/{username}/gists\",\n    \"GET /users/{username}/gpg_keys\",\n    \"GET /users/{username}/keys\",\n    \"GET /users/{username}/orgs\",\n    \"GET /users/{username}/packages\",\n    \"GET /users/{username}/projects\",\n    \"GET /users/{username}/received_events\",\n    \"GET /users/{username}/received_events/public\",\n    \"GET /users/{username}/repos\",\n    \"GET /users/{username}/social_accounts\",\n    \"GET /users/{username}/ssh_signing_keys\",\n    \"GET /users/{username}/starred\",\n    \"GET /users/{username}/subscriptions\"\n];\n// pkg/dist-src/paginating-endpoints.js\nfunction isPaginatingEndpoint(arg) {\n    if (typeof arg === \"string\") {\n        return paginatingEndpoints.includes(arg);\n    } else {\n        return false;\n    }\n}\n// pkg/dist-src/index.js\nfunction paginateRest(octokit) {\n    return {\n        paginate: Object.assign(paginate.bind(null, octokit), {\n            iterator: iterator.bind(null, octokit)\n        })\n    };\n}\npaginateRest.VERSION = VERSION;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/plugin-paginate-rest/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/plugin-request-log/dist-node/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@octokit/plugin-request-log/dist-node/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    requestLog: ()=>requestLog\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n// pkg/dist-src/version.js\nvar VERSION = \"4.0.1\";\n// pkg/dist-src/index.js\nfunction requestLog(octokit) {\n    octokit.hook.wrap(\"request\", (request, options)=>{\n        octokit.log.debug(\"request\", options);\n        const start = Date.now();\n        const requestOptions = octokit.request.endpoint.parse(options);\n        const path = requestOptions.url.replace(options.baseUrl, \"\");\n        return request(options).then((response)=>{\n            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);\n            return response;\n        }).catch((error)=>{\n            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`);\n            throw error;\n        });\n    });\n}\nrequestLog.VERSION = VERSION;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcGx1Z2luLXJlcXVlc3QtbG9nL2Rpc3Qtbm9kZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFdBQVcsQ0FBQ0MsUUFBUUM7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmWixVQUFVVyxRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9oQixrQkFBa0JhLE1BQ2hDLElBQUksQ0FBQ1gsYUFBYWUsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q25CLFVBQVVpQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT2pCLGlCQUFpQmUsTUFBTUcsSUFBRyxLQUFNRCxLQUFLTCxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPRTtBQUNUO0FBQ0EsSUFBSU0sZUFBZSxDQUFDQyxNQUFRUixZQUFZaEIsVUFBVSxDQUFDLEdBQUcsY0FBYztRQUFFeUIsT0FBTztJQUFLLElBQUlEO0FBRXRGLHdCQUF3QjtBQUN4QixJQUFJRSxtQkFBbUIsQ0FBQztBQUN4QmhCLFNBQVNnQixrQkFBa0I7SUFDekJDLFlBQVksSUFBTUE7QUFDcEI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHTixhQUFhRztBQUU5QiwwQkFBMEI7QUFDMUIsSUFBSUksVUFBVTtBQUVkLHdCQUF3QjtBQUN4QixTQUFTSCxXQUFXSSxPQUFPO0lBQ3pCQSxRQUFRQyxJQUFJLENBQUNDLElBQUksQ0FBQyxXQUFXLENBQUNDLFNBQVNDO1FBQ3JDSixRQUFRSyxHQUFHLENBQUNDLEtBQUssQ0FBQyxXQUFXRjtRQUM3QixNQUFNRyxRQUFRQyxLQUFLQyxHQUFHO1FBQ3RCLE1BQU1DLGlCQUFpQlYsUUFBUUcsT0FBTyxDQUFDUSxRQUFRLENBQUNDLEtBQUssQ0FBQ1I7UUFDdEQsTUFBTVMsT0FBT0gsZUFBZUksR0FBRyxDQUFDQyxPQUFPLENBQUNYLFFBQVFZLE9BQU8sRUFBRTtRQUN6RCxPQUFPYixRQUFRQyxTQUFTYSxJQUFJLENBQUMsQ0FBQ0M7WUFDNUJsQixRQUFRSyxHQUFHLENBQUNjLElBQUksQ0FDZCxDQUFDLEVBQUVULGVBQWVVLE1BQU0sQ0FBQyxDQUFDLEVBQUVQLEtBQUssR0FBRyxFQUFFSyxTQUFTRyxNQUFNLENBQUMsSUFBSSxFQUFFYixLQUFLQyxHQUFHLEtBQUtGLE1BQU0sRUFBRSxDQUFDO1lBRXBGLE9BQU9XO1FBQ1QsR0FBR0ksS0FBSyxDQUFDLENBQUNDO1lBQ1J2QixRQUFRSyxHQUFHLENBQUNjLElBQUksQ0FDZCxDQUFDLEVBQUVULGVBQWVVLE1BQU0sQ0FBQyxDQUFDLEVBQUVQLEtBQUssR0FBRyxFQUFFVSxNQUFNRixNQUFNLENBQUMsSUFBSSxFQUFFYixLQUFLQyxHQUFHLEtBQUtGLE1BQU0sRUFBRSxDQUFDO1lBRWpGLE1BQU1nQjtRQUNSO0lBQ0Y7QUFDRjtBQUNBM0IsV0FBV0csT0FBTyxHQUFHQTtBQUNyQiw2REFBNkQ7QUFDN0QsS0FBTUYsQ0FBQUEsQ0FFTiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9wbHVnaW4tcmVxdWVzdC1sb2cvZGlzdC1ub2RlL2luZGV4LmpzPzQyMTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBwa2cvZGlzdC1zcmMvaW5kZXguanNcbnZhciBkaXN0X3NyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChkaXN0X3NyY19leHBvcnRzLCB7XG4gIHJlcXVlc3RMb2c6ICgpID0+IHJlcXVlc3RMb2dcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZGlzdF9zcmNfZXhwb3J0cyk7XG5cbi8vIHBrZy9kaXN0LXNyYy92ZXJzaW9uLmpzXG52YXIgVkVSU0lPTiA9IFwiNC4wLjFcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG5mdW5jdGlvbiByZXF1ZXN0TG9nKG9jdG9raXQpIHtcbiAgb2N0b2tpdC5ob29rLndyYXAoXCJyZXF1ZXN0XCIsIChyZXF1ZXN0LCBvcHRpb25zKSA9PiB7XG4gICAgb2N0b2tpdC5sb2cuZGVidWcoXCJyZXF1ZXN0XCIsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IG9jdG9raXQucmVxdWVzdC5lbmRwb2ludC5wYXJzZShvcHRpb25zKTtcbiAgICBjb25zdCBwYXRoID0gcmVxdWVzdE9wdGlvbnMudXJsLnJlcGxhY2Uob3B0aW9ucy5iYXNlVXJsLCBcIlwiKTtcbiAgICByZXR1cm4gcmVxdWVzdChvcHRpb25zKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgb2N0b2tpdC5sb2cuaW5mbyhcbiAgICAgICAgYCR7cmVxdWVzdE9wdGlvbnMubWV0aG9kfSAke3BhdGh9IC0gJHtyZXNwb25zZS5zdGF0dXN9IGluICR7RGF0ZS5ub3coKSAtIHN0YXJ0fW1zYFxuICAgICAgKTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIG9jdG9raXQubG9nLmluZm8oXG4gICAgICAgIGAke3JlcXVlc3RPcHRpb25zLm1ldGhvZH0gJHtwYXRofSAtICR7ZXJyb3Iuc3RhdHVzfSBpbiAke0RhdGUubm93KCkgLSBzdGFydH1tc2BcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KTtcbiAgfSk7XG59XG5yZXF1ZXN0TG9nLlZFUlNJT04gPSBWRVJTSU9OO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlcXVlc3RMb2dcbn0pO1xuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJ2YWx1ZSIsImRpc3Rfc3JjX2V4cG9ydHMiLCJyZXF1ZXN0TG9nIiwibW9kdWxlIiwiZXhwb3J0cyIsIlZFUlNJT04iLCJvY3Rva2l0IiwiaG9vayIsIndyYXAiLCJyZXF1ZXN0Iiwib3B0aW9ucyIsImxvZyIsImRlYnVnIiwic3RhcnQiLCJEYXRlIiwibm93IiwicmVxdWVzdE9wdGlvbnMiLCJlbmRwb2ludCIsInBhcnNlIiwicGF0aCIsInVybCIsInJlcGxhY2UiLCJiYXNlVXJsIiwidGhlbiIsInJlc3BvbnNlIiwiaW5mbyIsIm1ldGhvZCIsInN0YXR1cyIsImNhdGNoIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/plugin-request-log/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js ***!
  \*******************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    legacyRestEndpointMethods: ()=>legacyRestEndpointMethods,\n    restEndpointMethods: ()=>restEndpointMethods\n});\nmodule.exports = __toCommonJS(dist_src_exports);\n// pkg/dist-src/version.js\nvar VERSION = \"13.2.2\";\n// pkg/dist-src/generated/endpoints.js\nvar Endpoints = {\n    actions: {\n        addCustomLabelsToSelfHostedRunnerForOrg: [\n            \"POST /orgs/{org}/actions/runners/{runner_id}/labels\"\n        ],\n        addCustomLabelsToSelfHostedRunnerForRepo: [\n            \"POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n        ],\n        addSelectedRepoToOrgSecret: [\n            \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"\n        ],\n        addSelectedRepoToOrgVariable: [\n            \"PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}\"\n        ],\n        approveWorkflowRun: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve\"\n        ],\n        cancelWorkflowRun: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel\"\n        ],\n        createEnvironmentVariable: [\n            \"POST /repos/{owner}/{repo}/environments/{environment_name}/variables\"\n        ],\n        createOrUpdateEnvironmentSecret: [\n            \"PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}\"\n        ],\n        createOrUpdateOrgSecret: [\n            \"PUT /orgs/{org}/actions/secrets/{secret_name}\"\n        ],\n        createOrUpdateRepoSecret: [\n            \"PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}\"\n        ],\n        createOrgVariable: [\n            \"POST /orgs/{org}/actions/variables\"\n        ],\n        createRegistrationTokenForOrg: [\n            \"POST /orgs/{org}/actions/runners/registration-token\"\n        ],\n        createRegistrationTokenForRepo: [\n            \"POST /repos/{owner}/{repo}/actions/runners/registration-token\"\n        ],\n        createRemoveTokenForOrg: [\n            \"POST /orgs/{org}/actions/runners/remove-token\"\n        ],\n        createRemoveTokenForRepo: [\n            \"POST /repos/{owner}/{repo}/actions/runners/remove-token\"\n        ],\n        createRepoVariable: [\n            \"POST /repos/{owner}/{repo}/actions/variables\"\n        ],\n        createWorkflowDispatch: [\n            \"POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches\"\n        ],\n        deleteActionsCacheById: [\n            \"DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}\"\n        ],\n        deleteActionsCacheByKey: [\n            \"DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}\"\n        ],\n        deleteArtifact: [\n            \"DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"\n        ],\n        deleteEnvironmentSecret: [\n            \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}\"\n        ],\n        deleteEnvironmentVariable: [\n            \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}\"\n        ],\n        deleteOrgSecret: [\n            \"DELETE /orgs/{org}/actions/secrets/{secret_name}\"\n        ],\n        deleteOrgVariable: [\n            \"DELETE /orgs/{org}/actions/variables/{name}\"\n        ],\n        deleteRepoSecret: [\n            \"DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}\"\n        ],\n        deleteRepoVariable: [\n            \"DELETE /repos/{owner}/{repo}/actions/variables/{name}\"\n        ],\n        deleteSelfHostedRunnerFromOrg: [\n            \"DELETE /orgs/{org}/actions/runners/{runner_id}\"\n        ],\n        deleteSelfHostedRunnerFromRepo: [\n            \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}\"\n        ],\n        deleteWorkflowRun: [\n            \"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}\"\n        ],\n        deleteWorkflowRunLogs: [\n            \"DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"\n        ],\n        disableSelectedRepositoryGithubActionsOrganization: [\n            \"DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}\"\n        ],\n        disableWorkflow: [\n            \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable\"\n        ],\n        downloadArtifact: [\n            \"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}\"\n        ],\n        downloadJobLogsForWorkflowRun: [\n            \"GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs\"\n        ],\n        downloadWorkflowRunAttemptLogs: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs\"\n        ],\n        downloadWorkflowRunLogs: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs\"\n        ],\n        enableSelectedRepositoryGithubActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/repositories/{repository_id}\"\n        ],\n        enableWorkflow: [\n            \"PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable\"\n        ],\n        forceCancelWorkflowRun: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel\"\n        ],\n        generateRunnerJitconfigForOrg: [\n            \"POST /orgs/{org}/actions/runners/generate-jitconfig\"\n        ],\n        generateRunnerJitconfigForRepo: [\n            \"POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig\"\n        ],\n        getActionsCacheList: [\n            \"GET /repos/{owner}/{repo}/actions/caches\"\n        ],\n        getActionsCacheUsage: [\n            \"GET /repos/{owner}/{repo}/actions/cache/usage\"\n        ],\n        getActionsCacheUsageByRepoForOrg: [\n            \"GET /orgs/{org}/actions/cache/usage-by-repository\"\n        ],\n        getActionsCacheUsageForOrg: [\n            \"GET /orgs/{org}/actions/cache/usage\"\n        ],\n        getAllowedActionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions/selected-actions\"\n        ],\n        getAllowedActionsRepository: [\n            \"GET /repos/{owner}/{repo}/actions/permissions/selected-actions\"\n        ],\n        getArtifact: [\n            \"GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}\"\n        ],\n        getCustomOidcSubClaimForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/oidc/customization/sub\"\n        ],\n        getEnvironmentPublicKey: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key\"\n        ],\n        getEnvironmentSecret: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}\"\n        ],\n        getEnvironmentVariable: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}\"\n        ],\n        getGithubActionsDefaultWorkflowPermissionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions/workflow\"\n        ],\n        getGithubActionsDefaultWorkflowPermissionsRepository: [\n            \"GET /repos/{owner}/{repo}/actions/permissions/workflow\"\n        ],\n        getGithubActionsPermissionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions\"\n        ],\n        getGithubActionsPermissionsRepository: [\n            \"GET /repos/{owner}/{repo}/actions/permissions\"\n        ],\n        getJobForWorkflowRun: [\n            \"GET /repos/{owner}/{repo}/actions/jobs/{job_id}\"\n        ],\n        getOrgPublicKey: [\n            \"GET /orgs/{org}/actions/secrets/public-key\"\n        ],\n        getOrgSecret: [\n            \"GET /orgs/{org}/actions/secrets/{secret_name}\"\n        ],\n        getOrgVariable: [\n            \"GET /orgs/{org}/actions/variables/{name}\"\n        ],\n        getPendingDeploymentsForRun: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments\"\n        ],\n        getRepoPermissions: [\n            \"GET /repos/{owner}/{repo}/actions/permissions\",\n            {},\n            {\n                renamed: [\n                    \"actions\",\n                    \"getGithubActionsPermissionsRepository\"\n                ]\n            }\n        ],\n        getRepoPublicKey: [\n            \"GET /repos/{owner}/{repo}/actions/secrets/public-key\"\n        ],\n        getRepoSecret: [\n            \"GET /repos/{owner}/{repo}/actions/secrets/{secret_name}\"\n        ],\n        getRepoVariable: [\n            \"GET /repos/{owner}/{repo}/actions/variables/{name}\"\n        ],\n        getReviewsForRun: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals\"\n        ],\n        getSelfHostedRunnerForOrg: [\n            \"GET /orgs/{org}/actions/runners/{runner_id}\"\n        ],\n        getSelfHostedRunnerForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}\"\n        ],\n        getWorkflow: [\n            \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}\"\n        ],\n        getWorkflowAccessToRepository: [\n            \"GET /repos/{owner}/{repo}/actions/permissions/access\"\n        ],\n        getWorkflowRun: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}\"\n        ],\n        getWorkflowRunAttempt: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}\"\n        ],\n        getWorkflowRunUsage: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing\"\n        ],\n        getWorkflowUsage: [\n            \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing\"\n        ],\n        listArtifactsForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/artifacts\"\n        ],\n        listEnvironmentSecrets: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets\"\n        ],\n        listEnvironmentVariables: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/variables\"\n        ],\n        listJobsForWorkflowRun: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\"\n        ],\n        listJobsForWorkflowRunAttempt: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs\"\n        ],\n        listLabelsForSelfHostedRunnerForOrg: [\n            \"GET /orgs/{org}/actions/runners/{runner_id}/labels\"\n        ],\n        listLabelsForSelfHostedRunnerForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n        ],\n        listOrgSecrets: [\n            \"GET /orgs/{org}/actions/secrets\"\n        ],\n        listOrgVariables: [\n            \"GET /orgs/{org}/actions/variables\"\n        ],\n        listRepoOrganizationSecrets: [\n            \"GET /repos/{owner}/{repo}/actions/organization-secrets\"\n        ],\n        listRepoOrganizationVariables: [\n            \"GET /repos/{owner}/{repo}/actions/organization-variables\"\n        ],\n        listRepoSecrets: [\n            \"GET /repos/{owner}/{repo}/actions/secrets\"\n        ],\n        listRepoVariables: [\n            \"GET /repos/{owner}/{repo}/actions/variables\"\n        ],\n        listRepoWorkflows: [\n            \"GET /repos/{owner}/{repo}/actions/workflows\"\n        ],\n        listRunnerApplicationsForOrg: [\n            \"GET /orgs/{org}/actions/runners/downloads\"\n        ],\n        listRunnerApplicationsForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runners/downloads\"\n        ],\n        listSelectedReposForOrgSecret: [\n            \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\"\n        ],\n        listSelectedReposForOrgVariable: [\n            \"GET /orgs/{org}/actions/variables/{name}/repositories\"\n        ],\n        listSelectedRepositoriesEnabledGithubActionsOrganization: [\n            \"GET /orgs/{org}/actions/permissions/repositories\"\n        ],\n        listSelfHostedRunnersForOrg: [\n            \"GET /orgs/{org}/actions/runners\"\n        ],\n        listSelfHostedRunnersForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runners\"\n        ],\n        listWorkflowRunArtifacts: [\n            \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\"\n        ],\n        listWorkflowRuns: [\n            \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\"\n        ],\n        listWorkflowRunsForRepo: [\n            \"GET /repos/{owner}/{repo}/actions/runs\"\n        ],\n        reRunJobForWorkflowRun: [\n            \"POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun\"\n        ],\n        reRunWorkflow: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun\"\n        ],\n        reRunWorkflowFailedJobs: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs\"\n        ],\n        removeAllCustomLabelsFromSelfHostedRunnerForOrg: [\n            \"DELETE /orgs/{org}/actions/runners/{runner_id}/labels\"\n        ],\n        removeAllCustomLabelsFromSelfHostedRunnerForRepo: [\n            \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n        ],\n        removeCustomLabelFromSelfHostedRunnerForOrg: [\n            \"DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}\"\n        ],\n        removeCustomLabelFromSelfHostedRunnerForRepo: [\n            \"DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}\"\n        ],\n        removeSelectedRepoFromOrgSecret: [\n            \"DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}\"\n        ],\n        removeSelectedRepoFromOrgVariable: [\n            \"DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}\"\n        ],\n        reviewCustomGatesForRun: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule\"\n        ],\n        reviewPendingDeploymentsForRun: [\n            \"POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments\"\n        ],\n        setAllowedActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/selected-actions\"\n        ],\n        setAllowedActionsRepository: [\n            \"PUT /repos/{owner}/{repo}/actions/permissions/selected-actions\"\n        ],\n        setCustomLabelsForSelfHostedRunnerForOrg: [\n            \"PUT /orgs/{org}/actions/runners/{runner_id}/labels\"\n        ],\n        setCustomLabelsForSelfHostedRunnerForRepo: [\n            \"PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels\"\n        ],\n        setCustomOidcSubClaimForRepo: [\n            \"PUT /repos/{owner}/{repo}/actions/oidc/customization/sub\"\n        ],\n        setGithubActionsDefaultWorkflowPermissionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/workflow\"\n        ],\n        setGithubActionsDefaultWorkflowPermissionsRepository: [\n            \"PUT /repos/{owner}/{repo}/actions/permissions/workflow\"\n        ],\n        setGithubActionsPermissionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions\"\n        ],\n        setGithubActionsPermissionsRepository: [\n            \"PUT /repos/{owner}/{repo}/actions/permissions\"\n        ],\n        setSelectedReposForOrgSecret: [\n            \"PUT /orgs/{org}/actions/secrets/{secret_name}/repositories\"\n        ],\n        setSelectedReposForOrgVariable: [\n            \"PUT /orgs/{org}/actions/variables/{name}/repositories\"\n        ],\n        setSelectedRepositoriesEnabledGithubActionsOrganization: [\n            \"PUT /orgs/{org}/actions/permissions/repositories\"\n        ],\n        setWorkflowAccessToRepository: [\n            \"PUT /repos/{owner}/{repo}/actions/permissions/access\"\n        ],\n        updateEnvironmentVariable: [\n            \"PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}\"\n        ],\n        updateOrgVariable: [\n            \"PATCH /orgs/{org}/actions/variables/{name}\"\n        ],\n        updateRepoVariable: [\n            \"PATCH /repos/{owner}/{repo}/actions/variables/{name}\"\n        ]\n    },\n    activity: {\n        checkRepoIsStarredByAuthenticatedUser: [\n            \"GET /user/starred/{owner}/{repo}\"\n        ],\n        deleteRepoSubscription: [\n            \"DELETE /repos/{owner}/{repo}/subscription\"\n        ],\n        deleteThreadSubscription: [\n            \"DELETE /notifications/threads/{thread_id}/subscription\"\n        ],\n        getFeeds: [\n            \"GET /feeds\"\n        ],\n        getRepoSubscription: [\n            \"GET /repos/{owner}/{repo}/subscription\"\n        ],\n        getThread: [\n            \"GET /notifications/threads/{thread_id}\"\n        ],\n        getThreadSubscriptionForAuthenticatedUser: [\n            \"GET /notifications/threads/{thread_id}/subscription\"\n        ],\n        listEventsForAuthenticatedUser: [\n            \"GET /users/{username}/events\"\n        ],\n        listNotificationsForAuthenticatedUser: [\n            \"GET /notifications\"\n        ],\n        listOrgEventsForAuthenticatedUser: [\n            \"GET /users/{username}/events/orgs/{org}\"\n        ],\n        listPublicEvents: [\n            \"GET /events\"\n        ],\n        listPublicEventsForRepoNetwork: [\n            \"GET /networks/{owner}/{repo}/events\"\n        ],\n        listPublicEventsForUser: [\n            \"GET /users/{username}/events/public\"\n        ],\n        listPublicOrgEvents: [\n            \"GET /orgs/{org}/events\"\n        ],\n        listReceivedEventsForUser: [\n            \"GET /users/{username}/received_events\"\n        ],\n        listReceivedPublicEventsForUser: [\n            \"GET /users/{username}/received_events/public\"\n        ],\n        listRepoEvents: [\n            \"GET /repos/{owner}/{repo}/events\"\n        ],\n        listRepoNotificationsForAuthenticatedUser: [\n            \"GET /repos/{owner}/{repo}/notifications\"\n        ],\n        listReposStarredByAuthenticatedUser: [\n            \"GET /user/starred\"\n        ],\n        listReposStarredByUser: [\n            \"GET /users/{username}/starred\"\n        ],\n        listReposWatchedByUser: [\n            \"GET /users/{username}/subscriptions\"\n        ],\n        listStargazersForRepo: [\n            \"GET /repos/{owner}/{repo}/stargazers\"\n        ],\n        listWatchedReposForAuthenticatedUser: [\n            \"GET /user/subscriptions\"\n        ],\n        listWatchersForRepo: [\n            \"GET /repos/{owner}/{repo}/subscribers\"\n        ],\n        markNotificationsAsRead: [\n            \"PUT /notifications\"\n        ],\n        markRepoNotificationsAsRead: [\n            \"PUT /repos/{owner}/{repo}/notifications\"\n        ],\n        markThreadAsDone: [\n            \"DELETE /notifications/threads/{thread_id}\"\n        ],\n        markThreadAsRead: [\n            \"PATCH /notifications/threads/{thread_id}\"\n        ],\n        setRepoSubscription: [\n            \"PUT /repos/{owner}/{repo}/subscription\"\n        ],\n        setThreadSubscription: [\n            \"PUT /notifications/threads/{thread_id}/subscription\"\n        ],\n        starRepoForAuthenticatedUser: [\n            \"PUT /user/starred/{owner}/{repo}\"\n        ],\n        unstarRepoForAuthenticatedUser: [\n            \"DELETE /user/starred/{owner}/{repo}\"\n        ]\n    },\n    apps: {\n        addRepoToInstallation: [\n            \"PUT /user/installations/{installation_id}/repositories/{repository_id}\",\n            {},\n            {\n                renamed: [\n                    \"apps\",\n                    \"addRepoToInstallationForAuthenticatedUser\"\n                ]\n            }\n        ],\n        addRepoToInstallationForAuthenticatedUser: [\n            \"PUT /user/installations/{installation_id}/repositories/{repository_id}\"\n        ],\n        checkToken: [\n            \"POST /applications/{client_id}/token\"\n        ],\n        createFromManifest: [\n            \"POST /app-manifests/{code}/conversions\"\n        ],\n        createInstallationAccessToken: [\n            \"POST /app/installations/{installation_id}/access_tokens\"\n        ],\n        deleteAuthorization: [\n            \"DELETE /applications/{client_id}/grant\"\n        ],\n        deleteInstallation: [\n            \"DELETE /app/installations/{installation_id}\"\n        ],\n        deleteToken: [\n            \"DELETE /applications/{client_id}/token\"\n        ],\n        getAuthenticated: [\n            \"GET /app\"\n        ],\n        getBySlug: [\n            \"GET /apps/{app_slug}\"\n        ],\n        getInstallation: [\n            \"GET /app/installations/{installation_id}\"\n        ],\n        getOrgInstallation: [\n            \"GET /orgs/{org}/installation\"\n        ],\n        getRepoInstallation: [\n            \"GET /repos/{owner}/{repo}/installation\"\n        ],\n        getSubscriptionPlanForAccount: [\n            \"GET /marketplace_listing/accounts/{account_id}\"\n        ],\n        getSubscriptionPlanForAccountStubbed: [\n            \"GET /marketplace_listing/stubbed/accounts/{account_id}\"\n        ],\n        getUserInstallation: [\n            \"GET /users/{username}/installation\"\n        ],\n        getWebhookConfigForApp: [\n            \"GET /app/hook/config\"\n        ],\n        getWebhookDelivery: [\n            \"GET /app/hook/deliveries/{delivery_id}\"\n        ],\n        listAccountsForPlan: [\n            \"GET /marketplace_listing/plans/{plan_id}/accounts\"\n        ],\n        listAccountsForPlanStubbed: [\n            \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\"\n        ],\n        listInstallationReposForAuthenticatedUser: [\n            \"GET /user/installations/{installation_id}/repositories\"\n        ],\n        listInstallationRequestsForAuthenticatedApp: [\n            \"GET /app/installation-requests\"\n        ],\n        listInstallations: [\n            \"GET /app/installations\"\n        ],\n        listInstallationsForAuthenticatedUser: [\n            \"GET /user/installations\"\n        ],\n        listPlans: [\n            \"GET /marketplace_listing/plans\"\n        ],\n        listPlansStubbed: [\n            \"GET /marketplace_listing/stubbed/plans\"\n        ],\n        listReposAccessibleToInstallation: [\n            \"GET /installation/repositories\"\n        ],\n        listSubscriptionsForAuthenticatedUser: [\n            \"GET /user/marketplace_purchases\"\n        ],\n        listSubscriptionsForAuthenticatedUserStubbed: [\n            \"GET /user/marketplace_purchases/stubbed\"\n        ],\n        listWebhookDeliveries: [\n            \"GET /app/hook/deliveries\"\n        ],\n        redeliverWebhookDelivery: [\n            \"POST /app/hook/deliveries/{delivery_id}/attempts\"\n        ],\n        removeRepoFromInstallation: [\n            \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\",\n            {},\n            {\n                renamed: [\n                    \"apps\",\n                    \"removeRepoFromInstallationForAuthenticatedUser\"\n                ]\n            }\n        ],\n        removeRepoFromInstallationForAuthenticatedUser: [\n            \"DELETE /user/installations/{installation_id}/repositories/{repository_id}\"\n        ],\n        resetToken: [\n            \"PATCH /applications/{client_id}/token\"\n        ],\n        revokeInstallationAccessToken: [\n            \"DELETE /installation/token\"\n        ],\n        scopeToken: [\n            \"POST /applications/{client_id}/token/scoped\"\n        ],\n        suspendInstallation: [\n            \"PUT /app/installations/{installation_id}/suspended\"\n        ],\n        unsuspendInstallation: [\n            \"DELETE /app/installations/{installation_id}/suspended\"\n        ],\n        updateWebhookConfigForApp: [\n            \"PATCH /app/hook/config\"\n        ]\n    },\n    billing: {\n        getGithubActionsBillingOrg: [\n            \"GET /orgs/{org}/settings/billing/actions\"\n        ],\n        getGithubActionsBillingUser: [\n            \"GET /users/{username}/settings/billing/actions\"\n        ],\n        getGithubPackagesBillingOrg: [\n            \"GET /orgs/{org}/settings/billing/packages\"\n        ],\n        getGithubPackagesBillingUser: [\n            \"GET /users/{username}/settings/billing/packages\"\n        ],\n        getSharedStorageBillingOrg: [\n            \"GET /orgs/{org}/settings/billing/shared-storage\"\n        ],\n        getSharedStorageBillingUser: [\n            \"GET /users/{username}/settings/billing/shared-storage\"\n        ]\n    },\n    checks: {\n        create: [\n            \"POST /repos/{owner}/{repo}/check-runs\"\n        ],\n        createSuite: [\n            \"POST /repos/{owner}/{repo}/check-suites\"\n        ],\n        get: [\n            \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}\"\n        ],\n        getSuite: [\n            \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\"\n        ],\n        listAnnotations: [\n            \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\"\n        ],\n        listForRef: [\n            \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\"\n        ],\n        listForSuite: [\n            \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\"\n        ],\n        listSuitesForRef: [\n            \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\"\n        ],\n        rerequestRun: [\n            \"POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest\"\n        ],\n        rerequestSuite: [\n            \"POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\"\n        ],\n        setSuitesPreferences: [\n            \"PATCH /repos/{owner}/{repo}/check-suites/preferences\"\n        ],\n        update: [\n            \"PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}\"\n        ]\n    },\n    codeScanning: {\n        deleteAnalysis: [\n            \"DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}\"\n        ],\n        getAlert: [\n            \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\",\n            {},\n            {\n                renamedParameters: {\n                    alert_id: \"alert_number\"\n                }\n            }\n        ],\n        getAnalysis: [\n            \"GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}\"\n        ],\n        getCodeqlDatabase: [\n            \"GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}\"\n        ],\n        getDefaultSetup: [\n            \"GET /repos/{owner}/{repo}/code-scanning/default-setup\"\n        ],\n        getSarif: [\n            \"GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}\"\n        ],\n        listAlertInstances: [\n            \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\"\n        ],\n        listAlertsForOrg: [\n            \"GET /orgs/{org}/code-scanning/alerts\"\n        ],\n        listAlertsForRepo: [\n            \"GET /repos/{owner}/{repo}/code-scanning/alerts\"\n        ],\n        listAlertsInstances: [\n            \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\",\n            {},\n            {\n                renamed: [\n                    \"codeScanning\",\n                    \"listAlertInstances\"\n                ]\n            }\n        ],\n        listCodeqlDatabases: [\n            \"GET /repos/{owner}/{repo}/code-scanning/codeql/databases\"\n        ],\n        listRecentAnalyses: [\n            \"GET /repos/{owner}/{repo}/code-scanning/analyses\"\n        ],\n        updateAlert: [\n            \"PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}\"\n        ],\n        updateDefaultSetup: [\n            \"PATCH /repos/{owner}/{repo}/code-scanning/default-setup\"\n        ],\n        uploadSarif: [\n            \"POST /repos/{owner}/{repo}/code-scanning/sarifs\"\n        ]\n    },\n    codesOfConduct: {\n        getAllCodesOfConduct: [\n            \"GET /codes_of_conduct\"\n        ],\n        getConductCode: [\n            \"GET /codes_of_conduct/{key}\"\n        ]\n    },\n    codespaces: {\n        addRepositoryForSecretForAuthenticatedUser: [\n            \"PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n        ],\n        addSelectedRepoToOrgSecret: [\n            \"PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n        ],\n        checkPermissionsForDevcontainer: [\n            \"GET /repos/{owner}/{repo}/codespaces/permissions_check\"\n        ],\n        codespaceMachinesForAuthenticatedUser: [\n            \"GET /user/codespaces/{codespace_name}/machines\"\n        ],\n        createForAuthenticatedUser: [\n            \"POST /user/codespaces\"\n        ],\n        createOrUpdateOrgSecret: [\n            \"PUT /orgs/{org}/codespaces/secrets/{secret_name}\"\n        ],\n        createOrUpdateRepoSecret: [\n            \"PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n        ],\n        createOrUpdateSecretForAuthenticatedUser: [\n            \"PUT /user/codespaces/secrets/{secret_name}\"\n        ],\n        createWithPrForAuthenticatedUser: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces\"\n        ],\n        createWithRepoForAuthenticatedUser: [\n            \"POST /repos/{owner}/{repo}/codespaces\"\n        ],\n        deleteForAuthenticatedUser: [\n            \"DELETE /user/codespaces/{codespace_name}\"\n        ],\n        deleteFromOrganization: [\n            \"DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}\"\n        ],\n        deleteOrgSecret: [\n            \"DELETE /orgs/{org}/codespaces/secrets/{secret_name}\"\n        ],\n        deleteRepoSecret: [\n            \"DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n        ],\n        deleteSecretForAuthenticatedUser: [\n            \"DELETE /user/codespaces/secrets/{secret_name}\"\n        ],\n        exportForAuthenticatedUser: [\n            \"POST /user/codespaces/{codespace_name}/exports\"\n        ],\n        getCodespacesForUserInOrg: [\n            \"GET /orgs/{org}/members/{username}/codespaces\"\n        ],\n        getExportDetailsForAuthenticatedUser: [\n            \"GET /user/codespaces/{codespace_name}/exports/{export_id}\"\n        ],\n        getForAuthenticatedUser: [\n            \"GET /user/codespaces/{codespace_name}\"\n        ],\n        getOrgPublicKey: [\n            \"GET /orgs/{org}/codespaces/secrets/public-key\"\n        ],\n        getOrgSecret: [\n            \"GET /orgs/{org}/codespaces/secrets/{secret_name}\"\n        ],\n        getPublicKeyForAuthenticatedUser: [\n            \"GET /user/codespaces/secrets/public-key\"\n        ],\n        getRepoPublicKey: [\n            \"GET /repos/{owner}/{repo}/codespaces/secrets/public-key\"\n        ],\n        getRepoSecret: [\n            \"GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}\"\n        ],\n        getSecretForAuthenticatedUser: [\n            \"GET /user/codespaces/secrets/{secret_name}\"\n        ],\n        listDevcontainersInRepositoryForAuthenticatedUser: [\n            \"GET /repos/{owner}/{repo}/codespaces/devcontainers\"\n        ],\n        listForAuthenticatedUser: [\n            \"GET /user/codespaces\"\n        ],\n        listInOrganization: [\n            \"GET /orgs/{org}/codespaces\",\n            {},\n            {\n                renamedParameters: {\n                    org_id: \"org\"\n                }\n            }\n        ],\n        listInRepositoryForAuthenticatedUser: [\n            \"GET /repos/{owner}/{repo}/codespaces\"\n        ],\n        listOrgSecrets: [\n            \"GET /orgs/{org}/codespaces/secrets\"\n        ],\n        listRepoSecrets: [\n            \"GET /repos/{owner}/{repo}/codespaces/secrets\"\n        ],\n        listRepositoriesForSecretForAuthenticatedUser: [\n            \"GET /user/codespaces/secrets/{secret_name}/repositories\"\n        ],\n        listSecretsForAuthenticatedUser: [\n            \"GET /user/codespaces/secrets\"\n        ],\n        listSelectedReposForOrgSecret: [\n            \"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories\"\n        ],\n        preFlightWithRepoForAuthenticatedUser: [\n            \"GET /repos/{owner}/{repo}/codespaces/new\"\n        ],\n        publishForAuthenticatedUser: [\n            \"POST /user/codespaces/{codespace_name}/publish\"\n        ],\n        removeRepositoryForSecretForAuthenticatedUser: [\n            \"DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n        ],\n        removeSelectedRepoFromOrgSecret: [\n            \"DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}\"\n        ],\n        repoMachinesForAuthenticatedUser: [\n            \"GET /repos/{owner}/{repo}/codespaces/machines\"\n        ],\n        setRepositoriesForSecretForAuthenticatedUser: [\n            \"PUT /user/codespaces/secrets/{secret_name}/repositories\"\n        ],\n        setSelectedReposForOrgSecret: [\n            \"PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories\"\n        ],\n        startForAuthenticatedUser: [\n            \"POST /user/codespaces/{codespace_name}/start\"\n        ],\n        stopForAuthenticatedUser: [\n            \"POST /user/codespaces/{codespace_name}/stop\"\n        ],\n        stopInOrganization: [\n            \"POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop\"\n        ],\n        updateForAuthenticatedUser: [\n            \"PATCH /user/codespaces/{codespace_name}\"\n        ]\n    },\n    copilot: {\n        addCopilotSeatsForTeams: [\n            \"POST /orgs/{org}/copilot/billing/selected_teams\"\n        ],\n        addCopilotSeatsForUsers: [\n            \"POST /orgs/{org}/copilot/billing/selected_users\"\n        ],\n        cancelCopilotSeatAssignmentForTeams: [\n            \"DELETE /orgs/{org}/copilot/billing/selected_teams\"\n        ],\n        cancelCopilotSeatAssignmentForUsers: [\n            \"DELETE /orgs/{org}/copilot/billing/selected_users\"\n        ],\n        getCopilotOrganizationDetails: [\n            \"GET /orgs/{org}/copilot/billing\"\n        ],\n        getCopilotSeatDetailsForUser: [\n            \"GET /orgs/{org}/members/{username}/copilot\"\n        ],\n        listCopilotSeats: [\n            \"GET /orgs/{org}/copilot/billing/seats\"\n        ],\n        usageMetricsForEnterprise: [\n            \"GET /enterprises/{enterprise}/copilot/usage\"\n        ],\n        usageMetricsForOrg: [\n            \"GET /orgs/{org}/copilot/usage\"\n        ],\n        usageMetricsForTeam: [\n            \"GET /orgs/{org}/team/{team_slug}/copilot/usage\"\n        ]\n    },\n    dependabot: {\n        addSelectedRepoToOrgSecret: [\n            \"PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}\"\n        ],\n        createOrUpdateOrgSecret: [\n            \"PUT /orgs/{org}/dependabot/secrets/{secret_name}\"\n        ],\n        createOrUpdateRepoSecret: [\n            \"PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n        ],\n        deleteOrgSecret: [\n            \"DELETE /orgs/{org}/dependabot/secrets/{secret_name}\"\n        ],\n        deleteRepoSecret: [\n            \"DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n        ],\n        getAlert: [\n            \"GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}\"\n        ],\n        getOrgPublicKey: [\n            \"GET /orgs/{org}/dependabot/secrets/public-key\"\n        ],\n        getOrgSecret: [\n            \"GET /orgs/{org}/dependabot/secrets/{secret_name}\"\n        ],\n        getRepoPublicKey: [\n            \"GET /repos/{owner}/{repo}/dependabot/secrets/public-key\"\n        ],\n        getRepoSecret: [\n            \"GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}\"\n        ],\n        listAlertsForEnterprise: [\n            \"GET /enterprises/{enterprise}/dependabot/alerts\"\n        ],\n        listAlertsForOrg: [\n            \"GET /orgs/{org}/dependabot/alerts\"\n        ],\n        listAlertsForRepo: [\n            \"GET /repos/{owner}/{repo}/dependabot/alerts\"\n        ],\n        listOrgSecrets: [\n            \"GET /orgs/{org}/dependabot/secrets\"\n        ],\n        listRepoSecrets: [\n            \"GET /repos/{owner}/{repo}/dependabot/secrets\"\n        ],\n        listSelectedReposForOrgSecret: [\n            \"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories\"\n        ],\n        removeSelectedRepoFromOrgSecret: [\n            \"DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}\"\n        ],\n        setSelectedReposForOrgSecret: [\n            \"PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories\"\n        ],\n        updateAlert: [\n            \"PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}\"\n        ]\n    },\n    dependencyGraph: {\n        createRepositorySnapshot: [\n            \"POST /repos/{owner}/{repo}/dependency-graph/snapshots\"\n        ],\n        diffRange: [\n            \"GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}\"\n        ],\n        exportSbom: [\n            \"GET /repos/{owner}/{repo}/dependency-graph/sbom\"\n        ]\n    },\n    emojis: {\n        get: [\n            \"GET /emojis\"\n        ]\n    },\n    gists: {\n        checkIsStarred: [\n            \"GET /gists/{gist_id}/star\"\n        ],\n        create: [\n            \"POST /gists\"\n        ],\n        createComment: [\n            \"POST /gists/{gist_id}/comments\"\n        ],\n        delete: [\n            \"DELETE /gists/{gist_id}\"\n        ],\n        deleteComment: [\n            \"DELETE /gists/{gist_id}/comments/{comment_id}\"\n        ],\n        fork: [\n            \"POST /gists/{gist_id}/forks\"\n        ],\n        get: [\n            \"GET /gists/{gist_id}\"\n        ],\n        getComment: [\n            \"GET /gists/{gist_id}/comments/{comment_id}\"\n        ],\n        getRevision: [\n            \"GET /gists/{gist_id}/{sha}\"\n        ],\n        list: [\n            \"GET /gists\"\n        ],\n        listComments: [\n            \"GET /gists/{gist_id}/comments\"\n        ],\n        listCommits: [\n            \"GET /gists/{gist_id}/commits\"\n        ],\n        listForUser: [\n            \"GET /users/{username}/gists\"\n        ],\n        listForks: [\n            \"GET /gists/{gist_id}/forks\"\n        ],\n        listPublic: [\n            \"GET /gists/public\"\n        ],\n        listStarred: [\n            \"GET /gists/starred\"\n        ],\n        star: [\n            \"PUT /gists/{gist_id}/star\"\n        ],\n        unstar: [\n            \"DELETE /gists/{gist_id}/star\"\n        ],\n        update: [\n            \"PATCH /gists/{gist_id}\"\n        ],\n        updateComment: [\n            \"PATCH /gists/{gist_id}/comments/{comment_id}\"\n        ]\n    },\n    git: {\n        createBlob: [\n            \"POST /repos/{owner}/{repo}/git/blobs\"\n        ],\n        createCommit: [\n            \"POST /repos/{owner}/{repo}/git/commits\"\n        ],\n        createRef: [\n            \"POST /repos/{owner}/{repo}/git/refs\"\n        ],\n        createTag: [\n            \"POST /repos/{owner}/{repo}/git/tags\"\n        ],\n        createTree: [\n            \"POST /repos/{owner}/{repo}/git/trees\"\n        ],\n        deleteRef: [\n            \"DELETE /repos/{owner}/{repo}/git/refs/{ref}\"\n        ],\n        getBlob: [\n            \"GET /repos/{owner}/{repo}/git/blobs/{file_sha}\"\n        ],\n        getCommit: [\n            \"GET /repos/{owner}/{repo}/git/commits/{commit_sha}\"\n        ],\n        getRef: [\n            \"GET /repos/{owner}/{repo}/git/ref/{ref}\"\n        ],\n        getTag: [\n            \"GET /repos/{owner}/{repo}/git/tags/{tag_sha}\"\n        ],\n        getTree: [\n            \"GET /repos/{owner}/{repo}/git/trees/{tree_sha}\"\n        ],\n        listMatchingRefs: [\n            \"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\"\n        ],\n        updateRef: [\n            \"PATCH /repos/{owner}/{repo}/git/refs/{ref}\"\n        ]\n    },\n    gitignore: {\n        getAllTemplates: [\n            \"GET /gitignore/templates\"\n        ],\n        getTemplate: [\n            \"GET /gitignore/templates/{name}\"\n        ]\n    },\n    interactions: {\n        getRestrictionsForAuthenticatedUser: [\n            \"GET /user/interaction-limits\"\n        ],\n        getRestrictionsForOrg: [\n            \"GET /orgs/{org}/interaction-limits\"\n        ],\n        getRestrictionsForRepo: [\n            \"GET /repos/{owner}/{repo}/interaction-limits\"\n        ],\n        getRestrictionsForYourPublicRepos: [\n            \"GET /user/interaction-limits\",\n            {},\n            {\n                renamed: [\n                    \"interactions\",\n                    \"getRestrictionsForAuthenticatedUser\"\n                ]\n            }\n        ],\n        removeRestrictionsForAuthenticatedUser: [\n            \"DELETE /user/interaction-limits\"\n        ],\n        removeRestrictionsForOrg: [\n            \"DELETE /orgs/{org}/interaction-limits\"\n        ],\n        removeRestrictionsForRepo: [\n            \"DELETE /repos/{owner}/{repo}/interaction-limits\"\n        ],\n        removeRestrictionsForYourPublicRepos: [\n            \"DELETE /user/interaction-limits\",\n            {},\n            {\n                renamed: [\n                    \"interactions\",\n                    \"removeRestrictionsForAuthenticatedUser\"\n                ]\n            }\n        ],\n        setRestrictionsForAuthenticatedUser: [\n            \"PUT /user/interaction-limits\"\n        ],\n        setRestrictionsForOrg: [\n            \"PUT /orgs/{org}/interaction-limits\"\n        ],\n        setRestrictionsForRepo: [\n            \"PUT /repos/{owner}/{repo}/interaction-limits\"\n        ],\n        setRestrictionsForYourPublicRepos: [\n            \"PUT /user/interaction-limits\",\n            {},\n            {\n                renamed: [\n                    \"interactions\",\n                    \"setRestrictionsForAuthenticatedUser\"\n                ]\n            }\n        ]\n    },\n    issues: {\n        addAssignees: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/assignees\"\n        ],\n        addLabels: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/labels\"\n        ],\n        checkUserCanBeAssigned: [\n            \"GET /repos/{owner}/{repo}/assignees/{assignee}\"\n        ],\n        checkUserCanBeAssignedToIssue: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}\"\n        ],\n        create: [\n            \"POST /repos/{owner}/{repo}/issues\"\n        ],\n        createComment: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/comments\"\n        ],\n        createLabel: [\n            \"POST /repos/{owner}/{repo}/labels\"\n        ],\n        createMilestone: [\n            \"POST /repos/{owner}/{repo}/milestones\"\n        ],\n        deleteComment: [\n            \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}\"\n        ],\n        deleteLabel: [\n            \"DELETE /repos/{owner}/{repo}/labels/{name}\"\n        ],\n        deleteMilestone: [\n            \"DELETE /repos/{owner}/{repo}/milestones/{milestone_number}\"\n        ],\n        get: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}\"\n        ],\n        getComment: [\n            \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}\"\n        ],\n        getEvent: [\n            \"GET /repos/{owner}/{repo}/issues/events/{event_id}\"\n        ],\n        getLabel: [\n            \"GET /repos/{owner}/{repo}/labels/{name}\"\n        ],\n        getMilestone: [\n            \"GET /repos/{owner}/{repo}/milestones/{milestone_number}\"\n        ],\n        list: [\n            \"GET /issues\"\n        ],\n        listAssignees: [\n            \"GET /repos/{owner}/{repo}/assignees\"\n        ],\n        listComments: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\"\n        ],\n        listCommentsForRepo: [\n            \"GET /repos/{owner}/{repo}/issues/comments\"\n        ],\n        listEvents: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\"\n        ],\n        listEventsForRepo: [\n            \"GET /repos/{owner}/{repo}/issues/events\"\n        ],\n        listEventsForTimeline: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\"\n        ],\n        listForAuthenticatedUser: [\n            \"GET /user/issues\"\n        ],\n        listForOrg: [\n            \"GET /orgs/{org}/issues\"\n        ],\n        listForRepo: [\n            \"GET /repos/{owner}/{repo}/issues\"\n        ],\n        listLabelsForMilestone: [\n            \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\"\n        ],\n        listLabelsForRepo: [\n            \"GET /repos/{owner}/{repo}/labels\"\n        ],\n        listLabelsOnIssue: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\"\n        ],\n        listMilestones: [\n            \"GET /repos/{owner}/{repo}/milestones\"\n        ],\n        lock: [\n            \"PUT /repos/{owner}/{repo}/issues/{issue_number}/lock\"\n        ],\n        removeAllLabels: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels\"\n        ],\n        removeAssignees: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees\"\n        ],\n        removeLabel: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}\"\n        ],\n        setLabels: [\n            \"PUT /repos/{owner}/{repo}/issues/{issue_number}/labels\"\n        ],\n        unlock: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock\"\n        ],\n        update: [\n            \"PATCH /repos/{owner}/{repo}/issues/{issue_number}\"\n        ],\n        updateComment: [\n            \"PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}\"\n        ],\n        updateLabel: [\n            \"PATCH /repos/{owner}/{repo}/labels/{name}\"\n        ],\n        updateMilestone: [\n            \"PATCH /repos/{owner}/{repo}/milestones/{milestone_number}\"\n        ]\n    },\n    licenses: {\n        get: [\n            \"GET /licenses/{license}\"\n        ],\n        getAllCommonlyUsed: [\n            \"GET /licenses\"\n        ],\n        getForRepo: [\n            \"GET /repos/{owner}/{repo}/license\"\n        ]\n    },\n    markdown: {\n        render: [\n            \"POST /markdown\"\n        ],\n        renderRaw: [\n            \"POST /markdown/raw\",\n            {\n                headers: {\n                    \"content-type\": \"text/plain; charset=utf-8\"\n                }\n            }\n        ]\n    },\n    meta: {\n        get: [\n            \"GET /meta\"\n        ],\n        getAllVersions: [\n            \"GET /versions\"\n        ],\n        getOctocat: [\n            \"GET /octocat\"\n        ],\n        getZen: [\n            \"GET /zen\"\n        ],\n        root: [\n            \"GET /\"\n        ]\n    },\n    migrations: {\n        deleteArchiveForAuthenticatedUser: [\n            \"DELETE /user/migrations/{migration_id}/archive\"\n        ],\n        deleteArchiveForOrg: [\n            \"DELETE /orgs/{org}/migrations/{migration_id}/archive\"\n        ],\n        downloadArchiveForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}/archive\"\n        ],\n        getArchiveForAuthenticatedUser: [\n            \"GET /user/migrations/{migration_id}/archive\"\n        ],\n        getStatusForAuthenticatedUser: [\n            \"GET /user/migrations/{migration_id}\"\n        ],\n        getStatusForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}\"\n        ],\n        listForAuthenticatedUser: [\n            \"GET /user/migrations\"\n        ],\n        listForOrg: [\n            \"GET /orgs/{org}/migrations\"\n        ],\n        listReposForAuthenticatedUser: [\n            \"GET /user/migrations/{migration_id}/repositories\"\n        ],\n        listReposForOrg: [\n            \"GET /orgs/{org}/migrations/{migration_id}/repositories\"\n        ],\n        listReposForUser: [\n            \"GET /user/migrations/{migration_id}/repositories\",\n            {},\n            {\n                renamed: [\n                    \"migrations\",\n                    \"listReposForAuthenticatedUser\"\n                ]\n            }\n        ],\n        startForAuthenticatedUser: [\n            \"POST /user/migrations\"\n        ],\n        startForOrg: [\n            \"POST /orgs/{org}/migrations\"\n        ],\n        unlockRepoForAuthenticatedUser: [\n            \"DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\"\n        ],\n        unlockRepoForOrg: [\n            \"DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\"\n        ]\n    },\n    oidc: {\n        getOidcCustomSubTemplateForOrg: [\n            \"GET /orgs/{org}/actions/oidc/customization/sub\"\n        ],\n        updateOidcCustomSubTemplateForOrg: [\n            \"PUT /orgs/{org}/actions/oidc/customization/sub\"\n        ]\n    },\n    orgs: {\n        addSecurityManagerTeam: [\n            \"PUT /orgs/{org}/security-managers/teams/{team_slug}\"\n        ],\n        assignTeamToOrgRole: [\n            \"PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}\"\n        ],\n        assignUserToOrgRole: [\n            \"PUT /orgs/{org}/organization-roles/users/{username}/{role_id}\"\n        ],\n        blockUser: [\n            \"PUT /orgs/{org}/blocks/{username}\"\n        ],\n        cancelInvitation: [\n            \"DELETE /orgs/{org}/invitations/{invitation_id}\"\n        ],\n        checkBlockedUser: [\n            \"GET /orgs/{org}/blocks/{username}\"\n        ],\n        checkMembershipForUser: [\n            \"GET /orgs/{org}/members/{username}\"\n        ],\n        checkPublicMembershipForUser: [\n            \"GET /orgs/{org}/public_members/{username}\"\n        ],\n        convertMemberToOutsideCollaborator: [\n            \"PUT /orgs/{org}/outside_collaborators/{username}\"\n        ],\n        createCustomOrganizationRole: [\n            \"POST /orgs/{org}/organization-roles\"\n        ],\n        createInvitation: [\n            \"POST /orgs/{org}/invitations\"\n        ],\n        createOrUpdateCustomProperties: [\n            \"PATCH /orgs/{org}/properties/schema\"\n        ],\n        createOrUpdateCustomPropertiesValuesForRepos: [\n            \"PATCH /orgs/{org}/properties/values\"\n        ],\n        createOrUpdateCustomProperty: [\n            \"PUT /orgs/{org}/properties/schema/{custom_property_name}\"\n        ],\n        createWebhook: [\n            \"POST /orgs/{org}/hooks\"\n        ],\n        delete: [\n            \"DELETE /orgs/{org}\"\n        ],\n        deleteCustomOrganizationRole: [\n            \"DELETE /orgs/{org}/organization-roles/{role_id}\"\n        ],\n        deleteWebhook: [\n            \"DELETE /orgs/{org}/hooks/{hook_id}\"\n        ],\n        enableOrDisableSecurityProductOnAllOrgRepos: [\n            \"POST /orgs/{org}/{security_product}/{enablement}\"\n        ],\n        get: [\n            \"GET /orgs/{org}\"\n        ],\n        getAllCustomProperties: [\n            \"GET /orgs/{org}/properties/schema\"\n        ],\n        getCustomProperty: [\n            \"GET /orgs/{org}/properties/schema/{custom_property_name}\"\n        ],\n        getMembershipForAuthenticatedUser: [\n            \"GET /user/memberships/orgs/{org}\"\n        ],\n        getMembershipForUser: [\n            \"GET /orgs/{org}/memberships/{username}\"\n        ],\n        getOrgRole: [\n            \"GET /orgs/{org}/organization-roles/{role_id}\"\n        ],\n        getWebhook: [\n            \"GET /orgs/{org}/hooks/{hook_id}\"\n        ],\n        getWebhookConfigForOrg: [\n            \"GET /orgs/{org}/hooks/{hook_id}/config\"\n        ],\n        getWebhookDelivery: [\n            \"GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}\"\n        ],\n        list: [\n            \"GET /organizations\"\n        ],\n        listAppInstallations: [\n            \"GET /orgs/{org}/installations\"\n        ],\n        listBlockedUsers: [\n            \"GET /orgs/{org}/blocks\"\n        ],\n        listCustomPropertiesValuesForRepos: [\n            \"GET /orgs/{org}/properties/values\"\n        ],\n        listFailedInvitations: [\n            \"GET /orgs/{org}/failed_invitations\"\n        ],\n        listForAuthenticatedUser: [\n            \"GET /user/orgs\"\n        ],\n        listForUser: [\n            \"GET /users/{username}/orgs\"\n        ],\n        listInvitationTeams: [\n            \"GET /orgs/{org}/invitations/{invitation_id}/teams\"\n        ],\n        listMembers: [\n            \"GET /orgs/{org}/members\"\n        ],\n        listMembershipsForAuthenticatedUser: [\n            \"GET /user/memberships/orgs\"\n        ],\n        listOrgRoleTeams: [\n            \"GET /orgs/{org}/organization-roles/{role_id}/teams\"\n        ],\n        listOrgRoleUsers: [\n            \"GET /orgs/{org}/organization-roles/{role_id}/users\"\n        ],\n        listOrgRoles: [\n            \"GET /orgs/{org}/organization-roles\"\n        ],\n        listOrganizationFineGrainedPermissions: [\n            \"GET /orgs/{org}/organization-fine-grained-permissions\"\n        ],\n        listOutsideCollaborators: [\n            \"GET /orgs/{org}/outside_collaborators\"\n        ],\n        listPatGrantRepositories: [\n            \"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories\"\n        ],\n        listPatGrantRequestRepositories: [\n            \"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories\"\n        ],\n        listPatGrantRequests: [\n            \"GET /orgs/{org}/personal-access-token-requests\"\n        ],\n        listPatGrants: [\n            \"GET /orgs/{org}/personal-access-tokens\"\n        ],\n        listPendingInvitations: [\n            \"GET /orgs/{org}/invitations\"\n        ],\n        listPublicMembers: [\n            \"GET /orgs/{org}/public_members\"\n        ],\n        listSecurityManagerTeams: [\n            \"GET /orgs/{org}/security-managers\"\n        ],\n        listWebhookDeliveries: [\n            \"GET /orgs/{org}/hooks/{hook_id}/deliveries\"\n        ],\n        listWebhooks: [\n            \"GET /orgs/{org}/hooks\"\n        ],\n        patchCustomOrganizationRole: [\n            \"PATCH /orgs/{org}/organization-roles/{role_id}\"\n        ],\n        pingWebhook: [\n            \"POST /orgs/{org}/hooks/{hook_id}/pings\"\n        ],\n        redeliverWebhookDelivery: [\n            \"POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\"\n        ],\n        removeCustomProperty: [\n            \"DELETE /orgs/{org}/properties/schema/{custom_property_name}\"\n        ],\n        removeMember: [\n            \"DELETE /orgs/{org}/members/{username}\"\n        ],\n        removeMembershipForUser: [\n            \"DELETE /orgs/{org}/memberships/{username}\"\n        ],\n        removeOutsideCollaborator: [\n            \"DELETE /orgs/{org}/outside_collaborators/{username}\"\n        ],\n        removePublicMembershipForAuthenticatedUser: [\n            \"DELETE /orgs/{org}/public_members/{username}\"\n        ],\n        removeSecurityManagerTeam: [\n            \"DELETE /orgs/{org}/security-managers/teams/{team_slug}\"\n        ],\n        reviewPatGrantRequest: [\n            \"POST /orgs/{org}/personal-access-token-requests/{pat_request_id}\"\n        ],\n        reviewPatGrantRequestsInBulk: [\n            \"POST /orgs/{org}/personal-access-token-requests\"\n        ],\n        revokeAllOrgRolesTeam: [\n            \"DELETE /orgs/{org}/organization-roles/teams/{team_slug}\"\n        ],\n        revokeAllOrgRolesUser: [\n            \"DELETE /orgs/{org}/organization-roles/users/{username}\"\n        ],\n        revokeOrgRoleTeam: [\n            \"DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}\"\n        ],\n        revokeOrgRoleUser: [\n            \"DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}\"\n        ],\n        setMembershipForUser: [\n            \"PUT /orgs/{org}/memberships/{username}\"\n        ],\n        setPublicMembershipForAuthenticatedUser: [\n            \"PUT /orgs/{org}/public_members/{username}\"\n        ],\n        unblockUser: [\n            \"DELETE /orgs/{org}/blocks/{username}\"\n        ],\n        update: [\n            \"PATCH /orgs/{org}\"\n        ],\n        updateMembershipForAuthenticatedUser: [\n            \"PATCH /user/memberships/orgs/{org}\"\n        ],\n        updatePatAccess: [\n            \"POST /orgs/{org}/personal-access-tokens/{pat_id}\"\n        ],\n        updatePatAccesses: [\n            \"POST /orgs/{org}/personal-access-tokens\"\n        ],\n        updateWebhook: [\n            \"PATCH /orgs/{org}/hooks/{hook_id}\"\n        ],\n        updateWebhookConfigForOrg: [\n            \"PATCH /orgs/{org}/hooks/{hook_id}/config\"\n        ]\n    },\n    packages: {\n        deletePackageForAuthenticatedUser: [\n            \"DELETE /user/packages/{package_type}/{package_name}\"\n        ],\n        deletePackageForOrg: [\n            \"DELETE /orgs/{org}/packages/{package_type}/{package_name}\"\n        ],\n        deletePackageForUser: [\n            \"DELETE /users/{username}/packages/{package_type}/{package_name}\"\n        ],\n        deletePackageVersionForAuthenticatedUser: [\n            \"DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n        ],\n        deletePackageVersionForOrg: [\n            \"DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n        ],\n        deletePackageVersionForUser: [\n            \"DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n        ],\n        getAllPackageVersionsForAPackageOwnedByAnOrg: [\n            \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\",\n            {},\n            {\n                renamed: [\n                    \"packages\",\n                    \"getAllPackageVersionsForPackageOwnedByOrg\"\n                ]\n            }\n        ],\n        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [\n            \"GET /user/packages/{package_type}/{package_name}/versions\",\n            {},\n            {\n                renamed: [\n                    \"packages\",\n                    \"getAllPackageVersionsForPackageOwnedByAuthenticatedUser\"\n                ]\n            }\n        ],\n        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [\n            \"GET /user/packages/{package_type}/{package_name}/versions\"\n        ],\n        getAllPackageVersionsForPackageOwnedByOrg: [\n            \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\"\n        ],\n        getAllPackageVersionsForPackageOwnedByUser: [\n            \"GET /users/{username}/packages/{package_type}/{package_name}/versions\"\n        ],\n        getPackageForAuthenticatedUser: [\n            \"GET /user/packages/{package_type}/{package_name}\"\n        ],\n        getPackageForOrganization: [\n            \"GET /orgs/{org}/packages/{package_type}/{package_name}\"\n        ],\n        getPackageForUser: [\n            \"GET /users/{username}/packages/{package_type}/{package_name}\"\n        ],\n        getPackageVersionForAuthenticatedUser: [\n            \"GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n        ],\n        getPackageVersionForOrganization: [\n            \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n        ],\n        getPackageVersionForUser: [\n            \"GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}\"\n        ],\n        listDockerMigrationConflictingPackagesForAuthenticatedUser: [\n            \"GET /user/docker/conflicts\"\n        ],\n        listDockerMigrationConflictingPackagesForOrganization: [\n            \"GET /orgs/{org}/docker/conflicts\"\n        ],\n        listDockerMigrationConflictingPackagesForUser: [\n            \"GET /users/{username}/docker/conflicts\"\n        ],\n        listPackagesForAuthenticatedUser: [\n            \"GET /user/packages\"\n        ],\n        listPackagesForOrganization: [\n            \"GET /orgs/{org}/packages\"\n        ],\n        listPackagesForUser: [\n            \"GET /users/{username}/packages\"\n        ],\n        restorePackageForAuthenticatedUser: [\n            \"POST /user/packages/{package_type}/{package_name}/restore{?token}\"\n        ],\n        restorePackageForOrg: [\n            \"POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}\"\n        ],\n        restorePackageForUser: [\n            \"POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}\"\n        ],\n        restorePackageVersionForAuthenticatedUser: [\n            \"POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n        ],\n        restorePackageVersionForOrg: [\n            \"POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n        ],\n        restorePackageVersionForUser: [\n            \"POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore\"\n        ]\n    },\n    projects: {\n        addCollaborator: [\n            \"PUT /projects/{project_id}/collaborators/{username}\"\n        ],\n        createCard: [\n            \"POST /projects/columns/{column_id}/cards\"\n        ],\n        createColumn: [\n            \"POST /projects/{project_id}/columns\"\n        ],\n        createForAuthenticatedUser: [\n            \"POST /user/projects\"\n        ],\n        createForOrg: [\n            \"POST /orgs/{org}/projects\"\n        ],\n        createForRepo: [\n            \"POST /repos/{owner}/{repo}/projects\"\n        ],\n        delete: [\n            \"DELETE /projects/{project_id}\"\n        ],\n        deleteCard: [\n            \"DELETE /projects/columns/cards/{card_id}\"\n        ],\n        deleteColumn: [\n            \"DELETE /projects/columns/{column_id}\"\n        ],\n        get: [\n            \"GET /projects/{project_id}\"\n        ],\n        getCard: [\n            \"GET /projects/columns/cards/{card_id}\"\n        ],\n        getColumn: [\n            \"GET /projects/columns/{column_id}\"\n        ],\n        getPermissionForUser: [\n            \"GET /projects/{project_id}/collaborators/{username}/permission\"\n        ],\n        listCards: [\n            \"GET /projects/columns/{column_id}/cards\"\n        ],\n        listCollaborators: [\n            \"GET /projects/{project_id}/collaborators\"\n        ],\n        listColumns: [\n            \"GET /projects/{project_id}/columns\"\n        ],\n        listForOrg: [\n            \"GET /orgs/{org}/projects\"\n        ],\n        listForRepo: [\n            \"GET /repos/{owner}/{repo}/projects\"\n        ],\n        listForUser: [\n            \"GET /users/{username}/projects\"\n        ],\n        moveCard: [\n            \"POST /projects/columns/cards/{card_id}/moves\"\n        ],\n        moveColumn: [\n            \"POST /projects/columns/{column_id}/moves\"\n        ],\n        removeCollaborator: [\n            \"DELETE /projects/{project_id}/collaborators/{username}\"\n        ],\n        update: [\n            \"PATCH /projects/{project_id}\"\n        ],\n        updateCard: [\n            \"PATCH /projects/columns/cards/{card_id}\"\n        ],\n        updateColumn: [\n            \"PATCH /projects/columns/{column_id}\"\n        ]\n    },\n    pulls: {\n        checkIfMerged: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/merge\"\n        ],\n        create: [\n            \"POST /repos/{owner}/{repo}/pulls\"\n        ],\n        createReplyForReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies\"\n        ],\n        createReview: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"\n        ],\n        createReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/comments\"\n        ],\n        deletePendingReview: [\n            \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n        ],\n        deleteReviewComment: [\n            \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}\"\n        ],\n        dismissReview: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals\"\n        ],\n        get: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}\"\n        ],\n        getReview: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n        ],\n        getReviewComment: [\n            \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}\"\n        ],\n        list: [\n            \"GET /repos/{owner}/{repo}/pulls\"\n        ],\n        listCommentsForReview: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\"\n        ],\n        listCommits: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\"\n        ],\n        listFiles: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\"\n        ],\n        listRequestedReviewers: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n        ],\n        listReviewComments: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\"\n        ],\n        listReviewCommentsForRepo: [\n            \"GET /repos/{owner}/{repo}/pulls/comments\"\n        ],\n        listReviews: [\n            \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\"\n        ],\n        merge: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge\"\n        ],\n        removeRequestedReviewers: [\n            \"DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n        ],\n        requestReviewers: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\"\n        ],\n        submitReview: [\n            \"POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events\"\n        ],\n        update: [\n            \"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\"\n        ],\n        updateBranch: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch\"\n        ],\n        updateReview: [\n            \"PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}\"\n        ],\n        updateReviewComment: [\n            \"PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}\"\n        ]\n    },\n    rateLimit: {\n        get: [\n            \"GET /rate_limit\"\n        ]\n    },\n    reactions: {\n        createForCommitComment: [\n            \"POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\"\n        ],\n        createForIssue: [\n            \"POST /repos/{owner}/{repo}/issues/{issue_number}/reactions\"\n        ],\n        createForIssueComment: [\n            \"POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"\n        ],\n        createForPullRequestReviewComment: [\n            \"POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"\n        ],\n        createForRelease: [\n            \"POST /repos/{owner}/{repo}/releases/{release_id}/reactions\"\n        ],\n        createForTeamDiscussionCommentInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"\n        ],\n        createForTeamDiscussionInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"\n        ],\n        deleteForCommitComment: [\n            \"DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\"\n        ],\n        deleteForIssue: [\n            \"DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\"\n        ],\n        deleteForIssueComment: [\n            \"DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\"\n        ],\n        deleteForPullRequestComment: [\n            \"DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\"\n        ],\n        deleteForRelease: [\n            \"DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}\"\n        ],\n        deleteForTeamDiscussion: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\"\n        ],\n        deleteForTeamDiscussionComment: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\"\n        ],\n        listForCommitComment: [\n            \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\"\n        ],\n        listForIssue: [\n            \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\"\n        ],\n        listForIssueComment: [\n            \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\"\n        ],\n        listForPullRequestReviewComment: [\n            \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\"\n        ],\n        listForRelease: [\n            \"GET /repos/{owner}/{repo}/releases/{release_id}/reactions\"\n        ],\n        listForTeamDiscussionCommentInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\"\n        ],\n        listForTeamDiscussionInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\"\n        ]\n    },\n    repos: {\n        acceptInvitation: [\n            \"PATCH /user/repository_invitations/{invitation_id}\",\n            {},\n            {\n                renamed: [\n                    \"repos\",\n                    \"acceptInvitationForAuthenticatedUser\"\n                ]\n            }\n        ],\n        acceptInvitationForAuthenticatedUser: [\n            \"PATCH /user/repository_invitations/{invitation_id}\"\n        ],\n        addAppAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            {\n                mapToData: \"apps\"\n            }\n        ],\n        addCollaborator: [\n            \"PUT /repos/{owner}/{repo}/collaborators/{username}\"\n        ],\n        addStatusCheckContexts: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            {\n                mapToData: \"contexts\"\n            }\n        ],\n        addTeamAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            {\n                mapToData: \"teams\"\n            }\n        ],\n        addUserAccessRestrictions: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            {\n                mapToData: \"users\"\n            }\n        ],\n        cancelPagesDeployment: [\n            \"POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel\"\n        ],\n        checkAutomatedSecurityFixes: [\n            \"GET /repos/{owner}/{repo}/automated-security-fixes\"\n        ],\n        checkCollaborator: [\n            \"GET /repos/{owner}/{repo}/collaborators/{username}\"\n        ],\n        checkPrivateVulnerabilityReporting: [\n            \"GET /repos/{owner}/{repo}/private-vulnerability-reporting\"\n        ],\n        checkVulnerabilityAlerts: [\n            \"GET /repos/{owner}/{repo}/vulnerability-alerts\"\n        ],\n        codeownersErrors: [\n            \"GET /repos/{owner}/{repo}/codeowners/errors\"\n        ],\n        compareCommits: [\n            \"GET /repos/{owner}/{repo}/compare/{base}...{head}\"\n        ],\n        compareCommitsWithBasehead: [\n            \"GET /repos/{owner}/{repo}/compare/{basehead}\"\n        ],\n        createAutolink: [\n            \"POST /repos/{owner}/{repo}/autolinks\"\n        ],\n        createCommitComment: [\n            \"POST /repos/{owner}/{repo}/commits/{commit_sha}/comments\"\n        ],\n        createCommitSignatureProtection: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n        ],\n        createCommitStatus: [\n            \"POST /repos/{owner}/{repo}/statuses/{sha}\"\n        ],\n        createDeployKey: [\n            \"POST /repos/{owner}/{repo}/keys\"\n        ],\n        createDeployment: [\n            \"POST /repos/{owner}/{repo}/deployments\"\n        ],\n        createDeploymentBranchPolicy: [\n            \"POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\"\n        ],\n        createDeploymentProtectionRule: [\n            \"POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules\"\n        ],\n        createDeploymentStatus: [\n            \"POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"\n        ],\n        createDispatchEvent: [\n            \"POST /repos/{owner}/{repo}/dispatches\"\n        ],\n        createForAuthenticatedUser: [\n            \"POST /user/repos\"\n        ],\n        createFork: [\n            \"POST /repos/{owner}/{repo}/forks\"\n        ],\n        createInOrg: [\n            \"POST /orgs/{org}/repos\"\n        ],\n        createOrUpdateCustomPropertiesValues: [\n            \"PATCH /repos/{owner}/{repo}/properties/values\"\n        ],\n        createOrUpdateEnvironment: [\n            \"PUT /repos/{owner}/{repo}/environments/{environment_name}\"\n        ],\n        createOrUpdateFileContents: [\n            \"PUT /repos/{owner}/{repo}/contents/{path}\"\n        ],\n        createOrgRuleset: [\n            \"POST /orgs/{org}/rulesets\"\n        ],\n        createPagesDeployment: [\n            \"POST /repos/{owner}/{repo}/pages/deployments\"\n        ],\n        createPagesSite: [\n            \"POST /repos/{owner}/{repo}/pages\"\n        ],\n        createRelease: [\n            \"POST /repos/{owner}/{repo}/releases\"\n        ],\n        createRepoRuleset: [\n            \"POST /repos/{owner}/{repo}/rulesets\"\n        ],\n        createTagProtection: [\n            \"POST /repos/{owner}/{repo}/tags/protection\"\n        ],\n        createUsingTemplate: [\n            \"POST /repos/{template_owner}/{template_repo}/generate\"\n        ],\n        createWebhook: [\n            \"POST /repos/{owner}/{repo}/hooks\"\n        ],\n        declineInvitation: [\n            \"DELETE /user/repository_invitations/{invitation_id}\",\n            {},\n            {\n                renamed: [\n                    \"repos\",\n                    \"declineInvitationForAuthenticatedUser\"\n                ]\n            }\n        ],\n        declineInvitationForAuthenticatedUser: [\n            \"DELETE /user/repository_invitations/{invitation_id}\"\n        ],\n        delete: [\n            \"DELETE /repos/{owner}/{repo}\"\n        ],\n        deleteAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"\n        ],\n        deleteAdminBranchProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n        ],\n        deleteAnEnvironment: [\n            \"DELETE /repos/{owner}/{repo}/environments/{environment_name}\"\n        ],\n        deleteAutolink: [\n            \"DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}\"\n        ],\n        deleteBranchProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection\"\n        ],\n        deleteCommitComment: [\n            \"DELETE /repos/{owner}/{repo}/comments/{comment_id}\"\n        ],\n        deleteCommitSignatureProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n        ],\n        deleteDeployKey: [\n            \"DELETE /repos/{owner}/{repo}/keys/{key_id}\"\n        ],\n        deleteDeployment: [\n            \"DELETE /repos/{owner}/{repo}/deployments/{deployment_id}\"\n        ],\n        deleteDeploymentBranchPolicy: [\n            \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n        ],\n        deleteFile: [\n            \"DELETE /repos/{owner}/{repo}/contents/{path}\"\n        ],\n        deleteInvitation: [\n            \"DELETE /repos/{owner}/{repo}/invitations/{invitation_id}\"\n        ],\n        deleteOrgRuleset: [\n            \"DELETE /orgs/{org}/rulesets/{ruleset_id}\"\n        ],\n        deletePagesSite: [\n            \"DELETE /repos/{owner}/{repo}/pages\"\n        ],\n        deletePullRequestReviewProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n        ],\n        deleteRelease: [\n            \"DELETE /repos/{owner}/{repo}/releases/{release_id}\"\n        ],\n        deleteReleaseAsset: [\n            \"DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}\"\n        ],\n        deleteRepoRuleset: [\n            \"DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}\"\n        ],\n        deleteTagProtection: [\n            \"DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}\"\n        ],\n        deleteWebhook: [\n            \"DELETE /repos/{owner}/{repo}/hooks/{hook_id}\"\n        ],\n        disableAutomatedSecurityFixes: [\n            \"DELETE /repos/{owner}/{repo}/automated-security-fixes\"\n        ],\n        disableDeploymentProtectionRule: [\n            \"DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}\"\n        ],\n        disablePrivateVulnerabilityReporting: [\n            \"DELETE /repos/{owner}/{repo}/private-vulnerability-reporting\"\n        ],\n        disableVulnerabilityAlerts: [\n            \"DELETE /repos/{owner}/{repo}/vulnerability-alerts\"\n        ],\n        downloadArchive: [\n            \"GET /repos/{owner}/{repo}/zipball/{ref}\",\n            {},\n            {\n                renamed: [\n                    \"repos\",\n                    \"downloadZipballArchive\"\n                ]\n            }\n        ],\n        downloadTarballArchive: [\n            \"GET /repos/{owner}/{repo}/tarball/{ref}\"\n        ],\n        downloadZipballArchive: [\n            \"GET /repos/{owner}/{repo}/zipball/{ref}\"\n        ],\n        enableAutomatedSecurityFixes: [\n            \"PUT /repos/{owner}/{repo}/automated-security-fixes\"\n        ],\n        enablePrivateVulnerabilityReporting: [\n            \"PUT /repos/{owner}/{repo}/private-vulnerability-reporting\"\n        ],\n        enableVulnerabilityAlerts: [\n            \"PUT /repos/{owner}/{repo}/vulnerability-alerts\"\n        ],\n        generateReleaseNotes: [\n            \"POST /repos/{owner}/{repo}/releases/generate-notes\"\n        ],\n        get: [\n            \"GET /repos/{owner}/{repo}\"\n        ],\n        getAccessRestrictions: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions\"\n        ],\n        getAdminBranchProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n        ],\n        getAllDeploymentProtectionRules: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules\"\n        ],\n        getAllEnvironments: [\n            \"GET /repos/{owner}/{repo}/environments\"\n        ],\n        getAllStatusCheckContexts: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\"\n        ],\n        getAllTopics: [\n            \"GET /repos/{owner}/{repo}/topics\"\n        ],\n        getAppsWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\"\n        ],\n        getAutolink: [\n            \"GET /repos/{owner}/{repo}/autolinks/{autolink_id}\"\n        ],\n        getBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}\"\n        ],\n        getBranchProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection\"\n        ],\n        getBranchRules: [\n            \"GET /repos/{owner}/{repo}/rules/branches/{branch}\"\n        ],\n        getClones: [\n            \"GET /repos/{owner}/{repo}/traffic/clones\"\n        ],\n        getCodeFrequencyStats: [\n            \"GET /repos/{owner}/{repo}/stats/code_frequency\"\n        ],\n        getCollaboratorPermissionLevel: [\n            \"GET /repos/{owner}/{repo}/collaborators/{username}/permission\"\n        ],\n        getCombinedStatusForRef: [\n            \"GET /repos/{owner}/{repo}/commits/{ref}/status\"\n        ],\n        getCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{ref}\"\n        ],\n        getCommitActivityStats: [\n            \"GET /repos/{owner}/{repo}/stats/commit_activity\"\n        ],\n        getCommitComment: [\n            \"GET /repos/{owner}/{repo}/comments/{comment_id}\"\n        ],\n        getCommitSignatureProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures\"\n        ],\n        getCommunityProfileMetrics: [\n            \"GET /repos/{owner}/{repo}/community/profile\"\n        ],\n        getContent: [\n            \"GET /repos/{owner}/{repo}/contents/{path}\"\n        ],\n        getContributorsStats: [\n            \"GET /repos/{owner}/{repo}/stats/contributors\"\n        ],\n        getCustomDeploymentProtectionRule: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}\"\n        ],\n        getCustomPropertiesValues: [\n            \"GET /repos/{owner}/{repo}/properties/values\"\n        ],\n        getDeployKey: [\n            \"GET /repos/{owner}/{repo}/keys/{key_id}\"\n        ],\n        getDeployment: [\n            \"GET /repos/{owner}/{repo}/deployments/{deployment_id}\"\n        ],\n        getDeploymentBranchPolicy: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n        ],\n        getDeploymentStatus: [\n            \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}\"\n        ],\n        getEnvironment: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}\"\n        ],\n        getLatestPagesBuild: [\n            \"GET /repos/{owner}/{repo}/pages/builds/latest\"\n        ],\n        getLatestRelease: [\n            \"GET /repos/{owner}/{repo}/releases/latest\"\n        ],\n        getOrgRuleSuite: [\n            \"GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}\"\n        ],\n        getOrgRuleSuites: [\n            \"GET /orgs/{org}/rulesets/rule-suites\"\n        ],\n        getOrgRuleset: [\n            \"GET /orgs/{org}/rulesets/{ruleset_id}\"\n        ],\n        getOrgRulesets: [\n            \"GET /orgs/{org}/rulesets\"\n        ],\n        getPages: [\n            \"GET /repos/{owner}/{repo}/pages\"\n        ],\n        getPagesBuild: [\n            \"GET /repos/{owner}/{repo}/pages/builds/{build_id}\"\n        ],\n        getPagesDeployment: [\n            \"GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}\"\n        ],\n        getPagesHealthCheck: [\n            \"GET /repos/{owner}/{repo}/pages/health\"\n        ],\n        getParticipationStats: [\n            \"GET /repos/{owner}/{repo}/stats/participation\"\n        ],\n        getPullRequestReviewProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n        ],\n        getPunchCardStats: [\n            \"GET /repos/{owner}/{repo}/stats/punch_card\"\n        ],\n        getReadme: [\n            \"GET /repos/{owner}/{repo}/readme\"\n        ],\n        getReadmeInDirectory: [\n            \"GET /repos/{owner}/{repo}/readme/{dir}\"\n        ],\n        getRelease: [\n            \"GET /repos/{owner}/{repo}/releases/{release_id}\"\n        ],\n        getReleaseAsset: [\n            \"GET /repos/{owner}/{repo}/releases/assets/{asset_id}\"\n        ],\n        getReleaseByTag: [\n            \"GET /repos/{owner}/{repo}/releases/tags/{tag}\"\n        ],\n        getRepoRuleSuite: [\n            \"GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}\"\n        ],\n        getRepoRuleSuites: [\n            \"GET /repos/{owner}/{repo}/rulesets/rule-suites\"\n        ],\n        getRepoRuleset: [\n            \"GET /repos/{owner}/{repo}/rulesets/{ruleset_id}\"\n        ],\n        getRepoRulesets: [\n            \"GET /repos/{owner}/{repo}/rulesets\"\n        ],\n        getStatusChecksProtection: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n        ],\n        getTeamsWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\"\n        ],\n        getTopPaths: [\n            \"GET /repos/{owner}/{repo}/traffic/popular/paths\"\n        ],\n        getTopReferrers: [\n            \"GET /repos/{owner}/{repo}/traffic/popular/referrers\"\n        ],\n        getUsersWithAccessToProtectedBranch: [\n            \"GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\"\n        ],\n        getViews: [\n            \"GET /repos/{owner}/{repo}/traffic/views\"\n        ],\n        getWebhook: [\n            \"GET /repos/{owner}/{repo}/hooks/{hook_id}\"\n        ],\n        getWebhookConfigForRepo: [\n            \"GET /repos/{owner}/{repo}/hooks/{hook_id}/config\"\n        ],\n        getWebhookDelivery: [\n            \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}\"\n        ],\n        listActivities: [\n            \"GET /repos/{owner}/{repo}/activity\"\n        ],\n        listAutolinks: [\n            \"GET /repos/{owner}/{repo}/autolinks\"\n        ],\n        listBranches: [\n            \"GET /repos/{owner}/{repo}/branches\"\n        ],\n        listBranchesForHeadCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\"\n        ],\n        listCollaborators: [\n            \"GET /repos/{owner}/{repo}/collaborators\"\n        ],\n        listCommentsForCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\"\n        ],\n        listCommitCommentsForRepo: [\n            \"GET /repos/{owner}/{repo}/comments\"\n        ],\n        listCommitStatusesForRef: [\n            \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\"\n        ],\n        listCommits: [\n            \"GET /repos/{owner}/{repo}/commits\"\n        ],\n        listContributors: [\n            \"GET /repos/{owner}/{repo}/contributors\"\n        ],\n        listCustomDeploymentRuleIntegrations: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps\"\n        ],\n        listDeployKeys: [\n            \"GET /repos/{owner}/{repo}/keys\"\n        ],\n        listDeploymentBranchPolicies: [\n            \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\"\n        ],\n        listDeploymentStatuses: [\n            \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\"\n        ],\n        listDeployments: [\n            \"GET /repos/{owner}/{repo}/deployments\"\n        ],\n        listForAuthenticatedUser: [\n            \"GET /user/repos\"\n        ],\n        listForOrg: [\n            \"GET /orgs/{org}/repos\"\n        ],\n        listForUser: [\n            \"GET /users/{username}/repos\"\n        ],\n        listForks: [\n            \"GET /repos/{owner}/{repo}/forks\"\n        ],\n        listInvitations: [\n            \"GET /repos/{owner}/{repo}/invitations\"\n        ],\n        listInvitationsForAuthenticatedUser: [\n            \"GET /user/repository_invitations\"\n        ],\n        listLanguages: [\n            \"GET /repos/{owner}/{repo}/languages\"\n        ],\n        listPagesBuilds: [\n            \"GET /repos/{owner}/{repo}/pages/builds\"\n        ],\n        listPublic: [\n            \"GET /repositories\"\n        ],\n        listPullRequestsAssociatedWithCommit: [\n            \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\"\n        ],\n        listReleaseAssets: [\n            \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\"\n        ],\n        listReleases: [\n            \"GET /repos/{owner}/{repo}/releases\"\n        ],\n        listTagProtection: [\n            \"GET /repos/{owner}/{repo}/tags/protection\"\n        ],\n        listTags: [\n            \"GET /repos/{owner}/{repo}/tags\"\n        ],\n        listTeams: [\n            \"GET /repos/{owner}/{repo}/teams\"\n        ],\n        listWebhookDeliveries: [\n            \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\"\n        ],\n        listWebhooks: [\n            \"GET /repos/{owner}/{repo}/hooks\"\n        ],\n        merge: [\n            \"POST /repos/{owner}/{repo}/merges\"\n        ],\n        mergeUpstream: [\n            \"POST /repos/{owner}/{repo}/merge-upstream\"\n        ],\n        pingWebhook: [\n            \"POST /repos/{owner}/{repo}/hooks/{hook_id}/pings\"\n        ],\n        redeliverWebhookDelivery: [\n            \"POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts\"\n        ],\n        removeAppAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            {\n                mapToData: \"apps\"\n            }\n        ],\n        removeCollaborator: [\n            \"DELETE /repos/{owner}/{repo}/collaborators/{username}\"\n        ],\n        removeStatusCheckContexts: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            {\n                mapToData: \"contexts\"\n            }\n        ],\n        removeStatusCheckProtection: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n        ],\n        removeTeamAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            {\n                mapToData: \"teams\"\n            }\n        ],\n        removeUserAccessRestrictions: [\n            \"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            {\n                mapToData: \"users\"\n            }\n        ],\n        renameBranch: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/rename\"\n        ],\n        replaceAllTopics: [\n            \"PUT /repos/{owner}/{repo}/topics\"\n        ],\n        requestPagesBuild: [\n            \"POST /repos/{owner}/{repo}/pages/builds\"\n        ],\n        setAdminBranchProtection: [\n            \"POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins\"\n        ],\n        setAppAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps\",\n            {},\n            {\n                mapToData: \"apps\"\n            }\n        ],\n        setStatusCheckContexts: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts\",\n            {},\n            {\n                mapToData: \"contexts\"\n            }\n        ],\n        setTeamAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams\",\n            {},\n            {\n                mapToData: \"teams\"\n            }\n        ],\n        setUserAccessRestrictions: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users\",\n            {},\n            {\n                mapToData: \"users\"\n            }\n        ],\n        testPushWebhook: [\n            \"POST /repos/{owner}/{repo}/hooks/{hook_id}/tests\"\n        ],\n        transfer: [\n            \"POST /repos/{owner}/{repo}/transfer\"\n        ],\n        update: [\n            \"PATCH /repos/{owner}/{repo}\"\n        ],\n        updateBranchProtection: [\n            \"PUT /repos/{owner}/{repo}/branches/{branch}/protection\"\n        ],\n        updateCommitComment: [\n            \"PATCH /repos/{owner}/{repo}/comments/{comment_id}\"\n        ],\n        updateDeploymentBranchPolicy: [\n            \"PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}\"\n        ],\n        updateInformationAboutPagesSite: [\n            \"PUT /repos/{owner}/{repo}/pages\"\n        ],\n        updateInvitation: [\n            \"PATCH /repos/{owner}/{repo}/invitations/{invitation_id}\"\n        ],\n        updateOrgRuleset: [\n            \"PUT /orgs/{org}/rulesets/{ruleset_id}\"\n        ],\n        updatePullRequestReviewProtection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews\"\n        ],\n        updateRelease: [\n            \"PATCH /repos/{owner}/{repo}/releases/{release_id}\"\n        ],\n        updateReleaseAsset: [\n            \"PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}\"\n        ],\n        updateRepoRuleset: [\n            \"PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}\"\n        ],\n        updateStatusCheckPotection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\",\n            {},\n            {\n                renamed: [\n                    \"repos\",\n                    \"updateStatusCheckProtection\"\n                ]\n            }\n        ],\n        updateStatusCheckProtection: [\n            \"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks\"\n        ],\n        updateWebhook: [\n            \"PATCH /repos/{owner}/{repo}/hooks/{hook_id}\"\n        ],\n        updateWebhookConfigForRepo: [\n            \"PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config\"\n        ],\n        uploadReleaseAsset: [\n            \"POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}\",\n            {\n                baseUrl: \"https://uploads.github.com\"\n            }\n        ]\n    },\n    search: {\n        code: [\n            \"GET /search/code\"\n        ],\n        commits: [\n            \"GET /search/commits\"\n        ],\n        issuesAndPullRequests: [\n            \"GET /search/issues\"\n        ],\n        labels: [\n            \"GET /search/labels\"\n        ],\n        repos: [\n            \"GET /search/repositories\"\n        ],\n        topics: [\n            \"GET /search/topics\"\n        ],\n        users: [\n            \"GET /search/users\"\n        ]\n    },\n    secretScanning: {\n        getAlert: [\n            \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"\n        ],\n        listAlertsForEnterprise: [\n            \"GET /enterprises/{enterprise}/secret-scanning/alerts\"\n        ],\n        listAlertsForOrg: [\n            \"GET /orgs/{org}/secret-scanning/alerts\"\n        ],\n        listAlertsForRepo: [\n            \"GET /repos/{owner}/{repo}/secret-scanning/alerts\"\n        ],\n        listLocationsForAlert: [\n            \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations\"\n        ],\n        updateAlert: [\n            \"PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}\"\n        ]\n    },\n    securityAdvisories: {\n        createFork: [\n            \"POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks\"\n        ],\n        createPrivateVulnerabilityReport: [\n            \"POST /repos/{owner}/{repo}/security-advisories/reports\"\n        ],\n        createRepositoryAdvisory: [\n            \"POST /repos/{owner}/{repo}/security-advisories\"\n        ],\n        createRepositoryAdvisoryCveRequest: [\n            \"POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve\"\n        ],\n        getGlobalAdvisory: [\n            \"GET /advisories/{ghsa_id}\"\n        ],\n        getRepositoryAdvisory: [\n            \"GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}\"\n        ],\n        listGlobalAdvisories: [\n            \"GET /advisories\"\n        ],\n        listOrgRepositoryAdvisories: [\n            \"GET /orgs/{org}/security-advisories\"\n        ],\n        listRepositoryAdvisories: [\n            \"GET /repos/{owner}/{repo}/security-advisories\"\n        ],\n        updateRepositoryAdvisory: [\n            \"PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}\"\n        ]\n    },\n    teams: {\n        addOrUpdateMembershipForUserInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n        ],\n        addOrUpdateProjectPermissionsInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n        ],\n        addOrUpdateRepoPermissionsInOrg: [\n            \"PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n        ],\n        checkPermissionsForProjectInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n        ],\n        checkPermissionsForRepoInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n        ],\n        create: [\n            \"POST /orgs/{org}/teams\"\n        ],\n        createDiscussionCommentInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"\n        ],\n        createDiscussionInOrg: [\n            \"POST /orgs/{org}/teams/{team_slug}/discussions\"\n        ],\n        deleteDiscussionCommentInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n        ],\n        deleteDiscussionInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n        ],\n        deleteInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}\"\n        ],\n        getByName: [\n            \"GET /orgs/{org}/teams/{team_slug}\"\n        ],\n        getDiscussionCommentInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n        ],\n        getDiscussionInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n        ],\n        getMembershipForUserInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n        ],\n        list: [\n            \"GET /orgs/{org}/teams\"\n        ],\n        listChildInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/teams\"\n        ],\n        listDiscussionCommentsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\"\n        ],\n        listDiscussionsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/discussions\"\n        ],\n        listForAuthenticatedUser: [\n            \"GET /user/teams\"\n        ],\n        listMembersInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/members\"\n        ],\n        listPendingInvitationsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/invitations\"\n        ],\n        listProjectsInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/projects\"\n        ],\n        listReposInOrg: [\n            \"GET /orgs/{org}/teams/{team_slug}/repos\"\n        ],\n        removeMembershipForUserInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}\"\n        ],\n        removeProjectInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}\"\n        ],\n        removeRepoInOrg: [\n            \"DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}\"\n        ],\n        updateDiscussionCommentInOrg: [\n            \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}\"\n        ],\n        updateDiscussionInOrg: [\n            \"PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}\"\n        ],\n        updateInOrg: [\n            \"PATCH /orgs/{org}/teams/{team_slug}\"\n        ]\n    },\n    users: {\n        addEmailForAuthenticated: [\n            \"POST /user/emails\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"addEmailForAuthenticatedUser\"\n                ]\n            }\n        ],\n        addEmailForAuthenticatedUser: [\n            \"POST /user/emails\"\n        ],\n        addSocialAccountForAuthenticatedUser: [\n            \"POST /user/social_accounts\"\n        ],\n        block: [\n            \"PUT /user/blocks/{username}\"\n        ],\n        checkBlocked: [\n            \"GET /user/blocks/{username}\"\n        ],\n        checkFollowingForUser: [\n            \"GET /users/{username}/following/{target_user}\"\n        ],\n        checkPersonIsFollowedByAuthenticated: [\n            \"GET /user/following/{username}\"\n        ],\n        createGpgKeyForAuthenticated: [\n            \"POST /user/gpg_keys\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"createGpgKeyForAuthenticatedUser\"\n                ]\n            }\n        ],\n        createGpgKeyForAuthenticatedUser: [\n            \"POST /user/gpg_keys\"\n        ],\n        createPublicSshKeyForAuthenticated: [\n            \"POST /user/keys\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"createPublicSshKeyForAuthenticatedUser\"\n                ]\n            }\n        ],\n        createPublicSshKeyForAuthenticatedUser: [\n            \"POST /user/keys\"\n        ],\n        createSshSigningKeyForAuthenticatedUser: [\n            \"POST /user/ssh_signing_keys\"\n        ],\n        deleteEmailForAuthenticated: [\n            \"DELETE /user/emails\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"deleteEmailForAuthenticatedUser\"\n                ]\n            }\n        ],\n        deleteEmailForAuthenticatedUser: [\n            \"DELETE /user/emails\"\n        ],\n        deleteGpgKeyForAuthenticated: [\n            \"DELETE /user/gpg_keys/{gpg_key_id}\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"deleteGpgKeyForAuthenticatedUser\"\n                ]\n            }\n        ],\n        deleteGpgKeyForAuthenticatedUser: [\n            \"DELETE /user/gpg_keys/{gpg_key_id}\"\n        ],\n        deletePublicSshKeyForAuthenticated: [\n            \"DELETE /user/keys/{key_id}\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"deletePublicSshKeyForAuthenticatedUser\"\n                ]\n            }\n        ],\n        deletePublicSshKeyForAuthenticatedUser: [\n            \"DELETE /user/keys/{key_id}\"\n        ],\n        deleteSocialAccountForAuthenticatedUser: [\n            \"DELETE /user/social_accounts\"\n        ],\n        deleteSshSigningKeyForAuthenticatedUser: [\n            \"DELETE /user/ssh_signing_keys/{ssh_signing_key_id}\"\n        ],\n        follow: [\n            \"PUT /user/following/{username}\"\n        ],\n        getAuthenticated: [\n            \"GET /user\"\n        ],\n        getByUsername: [\n            \"GET /users/{username}\"\n        ],\n        getContextForUser: [\n            \"GET /users/{username}/hovercard\"\n        ],\n        getGpgKeyForAuthenticated: [\n            \"GET /user/gpg_keys/{gpg_key_id}\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"getGpgKeyForAuthenticatedUser\"\n                ]\n            }\n        ],\n        getGpgKeyForAuthenticatedUser: [\n            \"GET /user/gpg_keys/{gpg_key_id}\"\n        ],\n        getPublicSshKeyForAuthenticated: [\n            \"GET /user/keys/{key_id}\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"getPublicSshKeyForAuthenticatedUser\"\n                ]\n            }\n        ],\n        getPublicSshKeyForAuthenticatedUser: [\n            \"GET /user/keys/{key_id}\"\n        ],\n        getSshSigningKeyForAuthenticatedUser: [\n            \"GET /user/ssh_signing_keys/{ssh_signing_key_id}\"\n        ],\n        list: [\n            \"GET /users\"\n        ],\n        listBlockedByAuthenticated: [\n            \"GET /user/blocks\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"listBlockedByAuthenticatedUser\"\n                ]\n            }\n        ],\n        listBlockedByAuthenticatedUser: [\n            \"GET /user/blocks\"\n        ],\n        listEmailsForAuthenticated: [\n            \"GET /user/emails\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"listEmailsForAuthenticatedUser\"\n                ]\n            }\n        ],\n        listEmailsForAuthenticatedUser: [\n            \"GET /user/emails\"\n        ],\n        listFollowedByAuthenticated: [\n            \"GET /user/following\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"listFollowedByAuthenticatedUser\"\n                ]\n            }\n        ],\n        listFollowedByAuthenticatedUser: [\n            \"GET /user/following\"\n        ],\n        listFollowersForAuthenticatedUser: [\n            \"GET /user/followers\"\n        ],\n        listFollowersForUser: [\n            \"GET /users/{username}/followers\"\n        ],\n        listFollowingForUser: [\n            \"GET /users/{username}/following\"\n        ],\n        listGpgKeysForAuthenticated: [\n            \"GET /user/gpg_keys\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"listGpgKeysForAuthenticatedUser\"\n                ]\n            }\n        ],\n        listGpgKeysForAuthenticatedUser: [\n            \"GET /user/gpg_keys\"\n        ],\n        listGpgKeysForUser: [\n            \"GET /users/{username}/gpg_keys\"\n        ],\n        listPublicEmailsForAuthenticated: [\n            \"GET /user/public_emails\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"listPublicEmailsForAuthenticatedUser\"\n                ]\n            }\n        ],\n        listPublicEmailsForAuthenticatedUser: [\n            \"GET /user/public_emails\"\n        ],\n        listPublicKeysForUser: [\n            \"GET /users/{username}/keys\"\n        ],\n        listPublicSshKeysForAuthenticated: [\n            \"GET /user/keys\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"listPublicSshKeysForAuthenticatedUser\"\n                ]\n            }\n        ],\n        listPublicSshKeysForAuthenticatedUser: [\n            \"GET /user/keys\"\n        ],\n        listSocialAccountsForAuthenticatedUser: [\n            \"GET /user/social_accounts\"\n        ],\n        listSocialAccountsForUser: [\n            \"GET /users/{username}/social_accounts\"\n        ],\n        listSshSigningKeysForAuthenticatedUser: [\n            \"GET /user/ssh_signing_keys\"\n        ],\n        listSshSigningKeysForUser: [\n            \"GET /users/{username}/ssh_signing_keys\"\n        ],\n        setPrimaryEmailVisibilityForAuthenticated: [\n            \"PATCH /user/email/visibility\",\n            {},\n            {\n                renamed: [\n                    \"users\",\n                    \"setPrimaryEmailVisibilityForAuthenticatedUser\"\n                ]\n            }\n        ],\n        setPrimaryEmailVisibilityForAuthenticatedUser: [\n            \"PATCH /user/email/visibility\"\n        ],\n        unblock: [\n            \"DELETE /user/blocks/{username}\"\n        ],\n        unfollow: [\n            \"DELETE /user/following/{username}\"\n        ],\n        updateAuthenticated: [\n            \"PATCH /user\"\n        ]\n    }\n};\nvar endpoints_default = Endpoints;\n// pkg/dist-src/endpoints-to-methods.js\nvar endpointMethodsMap = /* @__PURE__ */ new Map();\nfor (const [scope, endpoints] of Object.entries(endpoints_default)){\n    for (const [methodName, endpoint] of Object.entries(endpoints)){\n        const [route, defaults, decorations] = endpoint;\n        const [method, url] = route.split(/ /);\n        const endpointDefaults = Object.assign({\n            method,\n            url\n        }, defaults);\n        if (!endpointMethodsMap.has(scope)) {\n            endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());\n        }\n        endpointMethodsMap.get(scope).set(methodName, {\n            scope,\n            methodName,\n            endpointDefaults,\n            decorations\n        });\n    }\n}\nvar handler = {\n    has ({ scope }, methodName) {\n        return endpointMethodsMap.get(scope).has(methodName);\n    },\n    getOwnPropertyDescriptor (target, methodName) {\n        return {\n            value: this.get(target, methodName),\n            // ensures method is in the cache\n            configurable: true,\n            writable: true,\n            enumerable: true\n        };\n    },\n    defineProperty (target, methodName, descriptor) {\n        Object.defineProperty(target.cache, methodName, descriptor);\n        return true;\n    },\n    deleteProperty (target, methodName) {\n        delete target.cache[methodName];\n        return true;\n    },\n    ownKeys ({ scope }) {\n        return [\n            ...endpointMethodsMap.get(scope).keys()\n        ];\n    },\n    set (target, methodName, value) {\n        return target.cache[methodName] = value;\n    },\n    get ({ octokit, scope, cache }, methodName) {\n        if (cache[methodName]) {\n            return cache[methodName];\n        }\n        const method = endpointMethodsMap.get(scope).get(methodName);\n        if (!method) {\n            return void 0;\n        }\n        const { endpointDefaults, decorations } = method;\n        if (decorations) {\n            cache[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);\n        } else {\n            cache[methodName] = octokit.request.defaults(endpointDefaults);\n        }\n        return cache[methodName];\n    }\n};\nfunction endpointsToMethods(octokit) {\n    const newMethods = {};\n    for (const scope of endpointMethodsMap.keys()){\n        newMethods[scope] = new Proxy({\n            octokit,\n            scope,\n            cache: {}\n        }, handler);\n    }\n    return newMethods;\n}\nfunction decorate(octokit, scope, methodName, defaults, decorations) {\n    const requestWithDefaults = octokit.request.defaults(defaults);\n    function withDecorations(...args) {\n        let options = requestWithDefaults.endpoint.merge(...args);\n        if (decorations.mapToData) {\n            options = Object.assign({}, options, {\n                data: options[decorations.mapToData],\n                [decorations.mapToData]: void 0\n            });\n            return requestWithDefaults(options);\n        }\n        if (decorations.renamed) {\n            const [newScope, newMethodName] = decorations.renamed;\n            octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);\n        }\n        if (decorations.deprecated) {\n            octokit.log.warn(decorations.deprecated);\n        }\n        if (decorations.renamedParameters) {\n            const options2 = requestWithDefaults.endpoint.merge(...args);\n            for (const [name, alias] of Object.entries(decorations.renamedParameters)){\n                if (name in options2) {\n                    octokit.log.warn(`\"${name}\" parameter is deprecated for \"octokit.${scope}.${methodName}()\". Use \"${alias}\" instead`);\n                    if (!(alias in options2)) {\n                        options2[alias] = options2[name];\n                    }\n                    delete options2[name];\n                }\n            }\n            return requestWithDefaults(options2);\n        }\n        return requestWithDefaults(...args);\n    }\n    return Object.assign(withDecorations, requestWithDefaults);\n}\n// pkg/dist-src/index.js\nfunction restEndpointMethods(octokit) {\n    const api = endpointsToMethods(octokit);\n    return {\n        rest: api\n    };\n}\nrestEndpointMethods.VERSION = VERSION;\nfunction legacyRestEndpointMethods(octokit) {\n    const api = endpointsToMethods(octokit);\n    return {\n        ...api,\n        rest: api\n    };\n}\nlegacyRestEndpointMethods.VERSION = VERSION;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/request-error/dist-node/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@octokit/request-error/dist-node/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    RequestError: ()=>RequestError\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_deprecation = __webpack_require__(/*! deprecation */ \"(rsc)/./node_modules/deprecation/dist-node/index.js\");\nvar import_once = __toESM(__webpack_require__(/*! once */ \"(rsc)/./node_modules/once/once.js\"));\nvar logOnceCode = (0, import_once.default)((deprecation)=>console.warn(deprecation));\nvar logOnceHeaders = (0, import_once.default)((deprecation)=>console.warn(deprecation));\nvar RequestError = class extends Error {\n    constructor(message, statusCode, options){\n        super(message);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this.name = \"HttpError\";\n        this.status = statusCode;\n        let headers;\n        if (\"headers\" in options && typeof options.headers !== \"undefined\") {\n            headers = options.headers;\n        }\n        if (\"response\" in options) {\n            this.response = options.response;\n            headers = options.response.headers;\n        }\n        const requestCopy = Object.assign({}, options.request);\n        if (options.request.headers.authorization) {\n            requestCopy.headers = Object.assign({}, options.request.headers, {\n                authorization: options.request.headers.authorization.replace(/ .*$/, \" [REDACTED]\")\n            });\n        }\n        requestCopy.url = requestCopy.url.replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\").replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n        this.request = requestCopy;\n        Object.defineProperty(this, \"code\", {\n            get () {\n                logOnceCode(new import_deprecation.Deprecation(\"[@octokit/request-error] `error.code` is deprecated, use `error.status`.\"));\n                return statusCode;\n            }\n        });\n        Object.defineProperty(this, \"headers\", {\n            get () {\n                logOnceHeaders(new import_deprecation.Deprecation(\"[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.\"));\n                return headers || {};\n            }\n        });\n    }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/request-error/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/request/dist-node/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@octokit/request/dist-node/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    request: ()=>request\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_endpoint = __webpack_require__(/*! @octokit/endpoint */ \"(rsc)/./node_modules/@octokit/endpoint/dist-node/index.js\");\nvar import_universal_user_agent = __webpack_require__(/*! universal-user-agent */ \"(rsc)/./node_modules/universal-user-agent/dist-node/index.js\");\n// pkg/dist-src/version.js\nvar VERSION = \"8.4.0\";\n// pkg/dist-src/is-plain-object.js\nfunction isPlainObject(value) {\n    if (typeof value !== \"object\" || value === null) return false;\n    if (Object.prototype.toString.call(value) !== \"[object Object]\") return false;\n    const proto = Object.getPrototypeOf(value);\n    if (proto === null) return true;\n    const Ctor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n    return typeof Ctor === \"function\" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);\n}\n// pkg/dist-src/fetch-wrapper.js\nvar import_request_error = __webpack_require__(/*! @octokit/request-error */ \"(rsc)/./node_modules/@octokit/request-error/dist-node/index.js\");\n// pkg/dist-src/get-buffer-response.js\nfunction getBufferResponse(response) {\n    return response.arrayBuffer();\n}\n// pkg/dist-src/fetch-wrapper.js\nfunction fetchWrapper(requestOptions) {\n    var _a, _b, _c, _d;\n    const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;\n    const parseSuccessResponseBody = ((_a = requestOptions.request) == null ? void 0 : _a.parseSuccessResponseBody) !== false;\n    if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {\n        requestOptions.body = JSON.stringify(requestOptions.body);\n    }\n    let headers = {};\n    let status;\n    let url;\n    let { fetch } = globalThis;\n    if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) {\n        fetch = requestOptions.request.fetch;\n    }\n    if (!fetch) {\n        throw new Error(\"fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing\");\n    }\n    return fetch(requestOptions.url, {\n        method: requestOptions.method,\n        body: requestOptions.body,\n        redirect: (_c = requestOptions.request) == null ? void 0 : _c.redirect,\n        headers: requestOptions.headers,\n        signal: (_d = requestOptions.request) == null ? void 0 : _d.signal,\n        // duplex must be set if request.body is ReadableStream or Async Iterables.\n        // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.\n        ...requestOptions.body && {\n            duplex: \"half\"\n        }\n    }).then(async (response)=>{\n        url = response.url;\n        status = response.status;\n        for (const keyAndValue of response.headers){\n            headers[keyAndValue[0]] = keyAndValue[1];\n        }\n        if (\"deprecation\" in headers) {\n            const matches = headers.link && headers.link.match(/<([^>]+)>; rel=\"deprecation\"/);\n            const deprecationLink = matches && matches.pop();\n            log.warn(`[@octokit/request] \"${requestOptions.method} ${requestOptions.url}\" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : \"\"}`);\n        }\n        if (status === 204 || status === 205) {\n            return;\n        }\n        if (requestOptions.method === \"HEAD\") {\n            if (status < 400) {\n                return;\n            }\n            throw new import_request_error.RequestError(response.statusText, status, {\n                response: {\n                    url,\n                    status,\n                    headers,\n                    data: void 0\n                },\n                request: requestOptions\n            });\n        }\n        if (status === 304) {\n            throw new import_request_error.RequestError(\"Not modified\", status, {\n                response: {\n                    url,\n                    status,\n                    headers,\n                    data: await getResponseData(response)\n                },\n                request: requestOptions\n            });\n        }\n        if (status >= 400) {\n            const data = await getResponseData(response);\n            const error = new import_request_error.RequestError(toErrorMessage(data), status, {\n                response: {\n                    url,\n                    status,\n                    headers,\n                    data\n                },\n                request: requestOptions\n            });\n            throw error;\n        }\n        return parseSuccessResponseBody ? await getResponseData(response) : response.body;\n    }).then((data)=>{\n        return {\n            status,\n            url,\n            headers,\n            data\n        };\n    }).catch((error)=>{\n        if (error instanceof import_request_error.RequestError) throw error;\n        else if (error.name === \"AbortError\") throw error;\n        let message = error.message;\n        if (error.name === \"TypeError\" && \"cause\" in error) {\n            if (error.cause instanceof Error) {\n                message = error.cause.message;\n            } else if (typeof error.cause === \"string\") {\n                message = error.cause;\n            }\n        }\n        throw new import_request_error.RequestError(message, 500, {\n            request: requestOptions\n        });\n    });\n}\nasync function getResponseData(response) {\n    const contentType = response.headers.get(\"content-type\");\n    if (/application\\/json/.test(contentType)) {\n        return response.json().catch(()=>response.text()).catch(()=>\"\");\n    }\n    if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n        return response.text();\n    }\n    return getBufferResponse(response);\n}\nfunction toErrorMessage(data) {\n    if (typeof data === \"string\") return data;\n    let suffix;\n    if (\"documentation_url\" in data) {\n        suffix = ` - ${data.documentation_url}`;\n    } else {\n        suffix = \"\";\n    }\n    if (\"message\" in data) {\n        if (Array.isArray(data.errors)) {\n            return `${data.message}: ${data.errors.map(JSON.stringify).join(\", \")}${suffix}`;\n        }\n        return `${data.message}${suffix}`;\n    }\n    return `Unknown error: ${JSON.stringify(data)}`;\n}\n// pkg/dist-src/with-defaults.js\nfunction withDefaults(oldEndpoint, newDefaults) {\n    const endpoint2 = oldEndpoint.defaults(newDefaults);\n    const newApi = function(route, parameters) {\n        const endpointOptions = endpoint2.merge(route, parameters);\n        if (!endpointOptions.request || !endpointOptions.request.hook) {\n            return fetchWrapper(endpoint2.parse(endpointOptions));\n        }\n        const request2 = (route2, parameters2)=>{\n            return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));\n        };\n        Object.assign(request2, {\n            endpoint: endpoint2,\n            defaults: withDefaults.bind(null, endpoint2)\n        });\n        return endpointOptions.request.hook(request2, endpointOptions);\n    };\n    return Object.assign(newApi, {\n        endpoint: endpoint2,\n        defaults: withDefaults.bind(null, endpoint2)\n    });\n}\n// pkg/dist-src/index.js\nvar request = withDefaults(import_endpoint.endpoint, {\n    headers: {\n        \"user-agent\": `octokit-request.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`\n    }\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/request/dist-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@octokit/rest/dist-node/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@octokit/rest/dist-node/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// pkg/dist-src/index.js\nvar dist_src_exports = {};\n__export(dist_src_exports, {\n    Octokit: ()=>Octokit\n});\nmodule.exports = __toCommonJS(dist_src_exports);\nvar import_core = __webpack_require__(/*! @octokit/core */ \"(rsc)/./node_modules/@octokit/core/dist-node/index.js\");\nvar import_plugin_request_log = __webpack_require__(/*! @octokit/plugin-request-log */ \"(rsc)/./node_modules/@octokit/plugin-request-log/dist-node/index.js\");\nvar import_plugin_paginate_rest = __webpack_require__(/*! @octokit/plugin-paginate-rest */ \"(rsc)/./node_modules/@octokit/plugin-paginate-rest/dist-node/index.js\");\nvar import_plugin_rest_endpoint_methods = __webpack_require__(/*! @octokit/plugin-rest-endpoint-methods */ \"(rsc)/./node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js\");\n// pkg/dist-src/version.js\nvar VERSION = \"20.1.1\";\n// pkg/dist-src/index.js\nvar Octokit = import_core.Octokit.plugin(import_plugin_request_log.requestLog, import_plugin_rest_endpoint_methods.legacyRestEndpointMethods, import_plugin_paginate_rest.paginateRest).defaults({\n    userAgent: `octokit-rest.js/${VERSION}`\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvcmVzdC9kaXN0LW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZlosVUFBVVcsUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPaEIsa0JBQWtCYSxNQUNoQyxJQUFJLENBQUNYLGFBQWFlLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekNuQixVQUFVaUIsSUFBSUksS0FBSztZQUFFUCxLQUFLLElBQU1JLElBQUksQ0FBQ0csSUFBSTtZQUFFTixZQUFZLENBQUVLLENBQUFBLE9BQU9qQixpQkFBaUJlLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLGVBQWUsQ0FBQ0MsTUFBUVIsWUFBWWhCLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRXlCLE9BQU87SUFBSyxJQUFJRDtBQUV0Rix3QkFBd0I7QUFDeEIsSUFBSUUsbUJBQW1CLENBQUM7QUFDeEJoQixTQUFTZ0Isa0JBQWtCO0lBQ3pCQyxTQUFTLElBQU1BO0FBQ2pCO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR04sYUFBYUc7QUFDOUIsSUFBSUksY0FBY0MsbUJBQU9BLENBQUMsNEVBQWU7QUFDekMsSUFBSUMsNEJBQTRCRCxtQkFBT0EsQ0FBQyx3R0FBNkI7QUFDckUsSUFBSUUsOEJBQThCRixtQkFBT0EsQ0FBQyw0R0FBK0I7QUFDekUsSUFBSUcsc0NBQXNDSCxtQkFBT0EsQ0FBQyw0SEFBdUM7QUFFekYsMEJBQTBCO0FBQzFCLElBQUlJLFVBQVU7QUFFZCx3QkFBd0I7QUFDeEIsSUFBSVIsVUFBVUcsWUFBWUgsT0FBTyxDQUFDUyxNQUFNLENBQ3RDSiwwQkFBMEJLLFVBQVUsRUFDcENILG9DQUFvQ0kseUJBQXlCLEVBQzdETCw0QkFBNEJNLFlBQVksRUFDeENDLFFBQVEsQ0FBQztJQUNUQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUVOLFFBQVEsQ0FBQztBQUN6QztBQUNBLDZEQUE2RDtBQUM3RCxLQUFNUCxDQUFBQSxDQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BvY3Rva2l0L3Jlc3QvZGlzdC1ub2RlL2luZGV4LmpzPzgyYTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBwa2cvZGlzdC1zcmMvaW5kZXguanNcbnZhciBkaXN0X3NyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChkaXN0X3NyY19leHBvcnRzLCB7XG4gIE9jdG9raXQ6ICgpID0+IE9jdG9raXRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZGlzdF9zcmNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQG9jdG9raXQvY29yZVwiKTtcbnZhciBpbXBvcnRfcGx1Z2luX3JlcXVlc3RfbG9nID0gcmVxdWlyZShcIkBvY3Rva2l0L3BsdWdpbi1yZXF1ZXN0LWxvZ1wiKTtcbnZhciBpbXBvcnRfcGx1Z2luX3BhZ2luYXRlX3Jlc3QgPSByZXF1aXJlKFwiQG9jdG9raXQvcGx1Z2luLXBhZ2luYXRlLXJlc3RcIik7XG52YXIgaW1wb3J0X3BsdWdpbl9yZXN0X2VuZHBvaW50X21ldGhvZHMgPSByZXF1aXJlKFwiQG9jdG9raXQvcGx1Z2luLXJlc3QtZW5kcG9pbnQtbWV0aG9kc1wiKTtcblxuLy8gcGtnL2Rpc3Qtc3JjL3ZlcnNpb24uanNcbnZhciBWRVJTSU9OID0gXCIyMC4xLjFcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgT2N0b2tpdCA9IGltcG9ydF9jb3JlLk9jdG9raXQucGx1Z2luKFxuICBpbXBvcnRfcGx1Z2luX3JlcXVlc3RfbG9nLnJlcXVlc3RMb2csXG4gIGltcG9ydF9wbHVnaW5fcmVzdF9lbmRwb2ludF9tZXRob2RzLmxlZ2FjeVJlc3RFbmRwb2ludE1ldGhvZHMsXG4gIGltcG9ydF9wbHVnaW5fcGFnaW5hdGVfcmVzdC5wYWdpbmF0ZVJlc3RcbikuZGVmYXVsdHMoe1xuICB1c2VyQWdlbnQ6IGBvY3Rva2l0LXJlc3QuanMvJHtWRVJTSU9OfWBcbn0pO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIE9jdG9raXRcbn0pO1xuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJ2YWx1ZSIsImRpc3Rfc3JjX2V4cG9ydHMiLCJPY3Rva2l0IiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9jb3JlIiwicmVxdWlyZSIsImltcG9ydF9wbHVnaW5fcmVxdWVzdF9sb2ciLCJpbXBvcnRfcGx1Z2luX3BhZ2luYXRlX3Jlc3QiLCJpbXBvcnRfcGx1Z2luX3Jlc3RfZW5kcG9pbnRfbWV0aG9kcyIsIlZFUlNJT04iLCJwbHVnaW4iLCJyZXF1ZXN0TG9nIiwibGVnYWN5UmVzdEVuZHBvaW50TWV0aG9kcyIsInBhZ2luYXRlUmVzdCIsImRlZmF1bHRzIiwidXNlckFnZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@octokit/rest/dist-node/index.js\n");

/***/ })

};
;